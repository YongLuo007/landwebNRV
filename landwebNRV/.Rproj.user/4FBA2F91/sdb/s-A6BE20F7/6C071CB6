{
    "contents" : "################################################################################\n#' purify SK PSP data \n#' \n#' \n#' @param SADataRaw  data table, is age_samples in the MS access file\n#' \n#' \n#' @param plotHeadRaw data.table, is plot_header in MS access file\n#' \n#' @param measureHeadRaw data.table, is mearsurement_header in MS access file\n#'        \n#' @param treeDataRaw data.table, is trees in MS access file\n#'\n#' @return  two data tables, the first one head data, which contains the location and SA info.\n#'                           the second one is purified tree data, which contains inividual tree infor.\n#'                           for the tree data, all trees are alive.\n#'                      \n#'\n#' @note no note\n#'\n#' @seealso no\n#'\n#' @include \n#' @export\n#' @docType methods\n#' @rdname dataPurification_SKPSP\n#'\n#' @author Yong Luo\n#'\n#' @examples\n#' \\dontrun{\n#' \n#' }\nsetGeneric(\"dataPurification_SKPSP\", function(SADataRaw, plotHeadRaw,\n                                              measureHeadRaw, treeDataRaw) {\n  standardGeneric(\"dataPurification_SKPSP\")\n})\n#' @export\n#' @rdname dataPurification_SKPSP\nsetMethod(\n  \"dataPurification_SKPSP\",\n  signature = c(SADataRaw = \"data.table\", \n                plotHeadRaw = \"data.table\",\n                measureHeadRaw = \"data.table\",\n                treeDataRaw = \"data.table\"),\n  definition = function(SADataRaw, plotHeadRaw,\n                        measureHeadRaw, treeDataRaw) {\n    # range(SADataRaw$COUNTED_AGE) # NA NA\n    # range(SADataRaw$TOTAL_AGE) # NA NA\n    # unique(SADataRaw$TREE_STATUS)\n    SADataRaw <- SADataRaw[!is.na(TOTAL_AGE) & TREE_STATUS == 1,]\n    SADataRaw[, baseYear := min(YEAR), by = PLOT_ID]\n    SADataRaw[, treeAge := TOTAL_AGE-(YEAR-baseYear)]\n    SADataRawDomSA <- SADataRaw[CROWN_CLASS == 1,] # the stand age first determined by dominant trees\n    SADataRawDomSA[, NofTrees:=length(CROWN_CLASS), by  = PLOT_ID]\n    # unique(SADataRawDomSA$NofTrees) # 1 2 3 4 5\n    # stand age must determined by using at least 2 trees\n    SADataRawDomSA <- SADataRawDomSA[NofTrees != 1,]\n    # SADataRawDomSA[, treeAgeDif:=max(treeAge)-min(treeAge), by = PLOT_ID]\n    # range(SADataRawDomSA$treeAgeDif) # 0 44\n    # mean(SADataRawDomSA$treeAgeDif) # 7.03\n    SADataRawDomSA[, baseSA:=as.integer(mean(treeAge)), by = PLOT_ID]\n    SADataRawDomSA <- unique(SADataRawDomSA[,.(PLOT_ID, baseYear, baseSA)], by = \"PLOT_ID\")\n    # for the other plots determine SA using codominant trees\n    SADataRawCodomSA <- SADataRaw[CROWN_CLASS == 2,]\n    \n    SADataRawCodomSA <- SADataRawCodomSA[!(PLOT_ID %in% unique(SADataRawDomSA$PLOT_ID)),]\n    SADataRawCodomSA[, NofTrees:=length(CROWN_CLASS), by  = PLOT_ID]\n    # unique(SADataRawCodomSA$NofTrees)\n    SADataRawCodomSA <- SADataRawCodomSA[NofTrees != 1,]\n    SADataRawCodomSA[, baseSA:=as.integer(mean(treeAge)), by = PLOT_ID]\n    SADataRawCodomSA <- unique(SADataRawCodomSA[,.(PLOT_ID, baseYear, baseSA)], by = \"PLOT_ID\") \n    headData_SA <- rbind(SADataRawDomSA, SADataRawCodomSA)\n    headData_loca <- plotHeadRaw[PLOT_ID %in% unique(headData_SA$PLOT_ID),][\n      ,.(PLOT_ID, Z13nad83_e, Z13nad83_n, Zone = 13)]\n    names(headData_loca)[2:3] <- c(\"Easting\", \"Northing\")\n    headData_SALoca <- setkey(headData_SA, PLOT_ID)[setkey(headData_loca, PLOT_ID),\n                                                    nomatch = 0]\n    headData_PS <- measureHeadRaw[PLOT_ID %in% unique(headData_SALoca$PLOT_ID),][\n      ,.(PLOT_ID, PLOT_SIZE)][!is.na(PLOT_SIZE),]\n    headData_PS <- unique(headData_PS, by = \"PLOT_ID\")\n    setnames(headData_PS, \"PLOT_SIZE\", \"Plotsize\")\n    headData <- headData_SALoca[setkey(headData_PS, PLOT_ID), nomatch = 0]\n    \n    \n    # for tree data\n    treeDataRaw <- treeDataRaw[PLOT_ID %in% headData$PLOT_ID,][\n      ,.(PLOT_ID, TREE_NO, YEAR, SPECIES, DBH, HEIGHT, TREE_STATUS, \n         CONDITION_CODE1, CONDITION_CODE2, CONDITION_CODE3, MORTALITY)]\n    \n    # check the living trees\n    # 1. by tree status codes\n    #     1 1 Live\n    #     2 2 Declining\n    #     3 3 Dead or dying\n    #     4 4 Loose bark snag\n    #     5 5 Clean snag\n    #     6 6 Snag with broken top\n    #     7 7 Decomposed snag.\n    #     8 8 Down snag\n    #     9 9 Stump\n    treeDataRaw <- treeDataRaw[is.na(TREE_STATUS) | # conservtively\n                                 TREE_STATUS == 0 |\n                                 TREE_STATUS == 1 |\n                                 TREE_STATUS == 2,]\n    # 2. by mortality codes\n    #     Null 0\n    #     Natural or Undetermined 1\n    #     Disease 2\n    #     Insect 3\n    #     Human 4\n    #     Wind 5\n    #     Snow 6\n    #     Other Trees 7\n    #     Hail or Ice Storm 8\n    treeDataRaw <- treeDataRaw[MORTALITY == 0 |\n                                 is.na(MORTALITY),]\n    # check the trees with both status and mortality are NA\n    # unique(treeDataRaw[is.na(TREE_STATUS) & is.na(MORTALITY), ]$CONDITIONCODE1)\n    # NULL\n    treeDataRaw <- treeDataRaw[,.(PLOT_ID, TREE_NO, YEAR, SPECIES,  DBH, HEIGHT)]\n    names(treeDataRaw) <- c(\"PlotID\", \"Treenumber\", \"Measureyear\", \"Species\",\n                            \"DBH\", \"Height\")\n    setnames(headData, \"PLOT_ID\", \"PlotID\")\n    return(list(treeData = treeDataRaw, headData = headData))\n  })\n",
    "created" : 1461348759148.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1342087146",
    "id" : "6C071CB6",
    "lastKnownWriteTime" : 1461348747,
    "path" : "~/GitHub/landwebNRV/landwebNRV/R/dataPurification_SKPSP.R",
    "project_path" : "R/dataPurification_SKPSP.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}