{
    "contents" : "################################################################################\n#' purify BC PSP data \n#' \n#' \n#' @param treeDataRaw  data table, \n#'\n#' \n#' @param plotHeaderDataRaw data.table, \n#'        \n#'\n#' @return  two data tables, the first one head data, which contains the location and SA info.\n#'                           the second one is purified tree data, which contains inividual tree infor.\n#'                           for the tree data, all trees are alive.\n#'                      \n#'\n#' @note no note\n#'\n#' @seealso no\n#'\n#' @include \n#' @export\n#' @docType methods\n#' @rdname dataPurification_BCPSP\n#'\n#' @author Yong Luo\n#'\n#' @examples\n#' \\dontrun{\n#' \n#' }\nsetGeneric(\"dataPurification_BCPSP\", function(treeDataRaw, plotHeaderDataRaw) {\n  standardGeneric(\"dataPurification_BCPSP\")\n})\n#' @export\n#' @rdname dataPurification_BCPSP\nsetMethod(\n  \"dataPurification_BCPSP\",\n  signature = c(treeDataRaw = \"data.table\", \n                plotHeaderDataRaw = \"data.table\"),\n  definition = function(treeDataRaw, plotHeaderDataRaw) {\n    # purifying headData\n    # like AB data, the BC PSP have two level heirachical design (SAMP_ID and plot)\n    \n    # get the plots with SA\n    headerData <- plotHeaderDataRaw[tot_stand_age != -99,][\n      ,':='(utmtimes = length(unique(utm_zone)),\n            eastingtimes = length(unique(utm_easting)),\n            northingtimes = length(unique(utm_northing)),\n            SAtimes = length(unique(tot_stand_age)),\n            plotsizetimes = length(unique(area_pm)),\n            standorigtimes = length(unique(stnd_org)),\n            treatmenttimes = length(unique(treatment))),\n      by = SAMP_ID]\n    # unique(headDataRaw$utmtimes)#1\n    # unique(headDataRaw$eastingtimes)#1\n    # unique(headDataRaw$northingtimes)# 1\n    # unique(headDataRaw$SAtimes) # no NA\n    # unique(headDataRaw$plotsizetimes)#1\n    # unique(headDataRaw$standorigtimes) # 1\n    \n    \n    # select the natural originated and untreated  \n    headerData <- headerData[stnd_org == \"N\" | stnd_org == \"F\",]\n                               \n    headerData[,treatmenttimes := length(unique(treatment)), by = c(\"SAMP_ID\", \"meas_yr\")]\n    # unique(headDataRaw$treatmenttimes) # 1 2\n    headerData <- headerData[treatmenttimes == 1 & treatment == \"UNTREATED\", .(SAMP_ID, utm_zone, utm_easting,\n                 utm_northing, area_pm, tot_stand_age,\n                 meas_yr)]\n    \n\n    headerData[, baseYear := min(meas_yr),\n                by = SAMP_ID]\n    headerData[, baseSA := as.integer(tot_stand_age-(meas_yr-baseYear))]\n    # get the plots with locations\n    headerData <- headerData[!is.na(utm_zone) & !is.na(utm_easting) & !is.na(utm_northing),]\n    # get plots with plot size\n    headerData <- headerData[!is.na(area_pm),][,':='(tot_stand_age = NULL, meas_yr = NULL)]\n    names(headerData)[1:5] <- c(\"OrigPlotID1\", \"Zone\", \"Easting\",\n                              \"Northing\", \"PlotSize\")\n    headerData <- unique(headerData, by = c(\"OrigPlotID1\"))\n    \n    \n    \n    # for tree data\n    setnames(treeDataRaw, c(\"SAMP_ID\", \"plot_no\"),\n             c(\"OrigPlotID1\", \"OrigPlotID2\"))\n    treeData <- treeDataRaw[OrigPlotID1 %in% unique(headerData$OrigPlotID1),]\n    # range(treeData$meas_yr) # 1926 2014\n    # unique(treeData$Plotnumber) # 01 02 03\n    treeData <- treeData[sub_plot_tree == \"N\",][, OrigPlotID2 := as.numeric(OrigPlotID2)]\n    treeData <- treeData[tree_cls == 1 | tree_cls == 2,.(OrigPlotID1, OrigPlotID2, meas_yr, tree_no, species,\n                            dbh, height)]\n    # unique(treeData$ld)\n    names(treeData)[3:7] <- c(\"MeasureYear\", \"TreeNumber\", \"Species\", \"DBH\", \"Height\")\n    \n    measreidtable <- unique(treeData[,.(OrigPlotID1, OrigPlotID2, MeasureYear)], by = c(\"OrigPlotID1\", \"OrigPlotID2\", \"MeasureYear\"))\n    measreidtable[,MeasureID:= paste(\"BCPSP_\",row.names(measreidtable), sep = \"\")]\n    measreidtable <- measreidtable[,.(MeasureID, OrigPlotID1, OrigPlotID2, MeasureYear)]\n    headerData <- setkey(measreidtable, OrigPlotID1)[setkey(headerData, OrigPlotID1), nomatch = 0]\n    set(headerData, ,\"OrigPlotID2\", NULL)\n    headerData <- headerData[,.(MeasureID, OrigPlotID1, MeasureYear, Longitude = NA,\n                                Latitude = NA, Zone, Easting, Northing, PlotSize, baseYear,\n                                baseSA)]\n    treeData <- setkey(measreidtable, OrigPlotID1, OrigPlotID2, MeasureYear)[setkey(treeData, OrigPlotID1, OrigPlotID2, MeasureYear),\n                                                                             nomatch = 0]\n    return(list(plotHeaderData = headerData, treeData = treeData))\n})\n",
    "created" : 1461629419606.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3285714827",
    "id" : "B18D0520",
    "lastKnownWriteTime" : 1461630607,
    "path" : "~/GitHub/landwebNRV/landwebNRV/R/dataPurification_BCPSP.R",
    "project_path" : "R/dataPurification_BCPSP.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}