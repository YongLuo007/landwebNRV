{
    "contents" : "################################################################################\n#' this function is to classify ecoregion in to study region \n#' based on ecoregion map and study area map\n#' \n#' @param studyAreaMap  Character string. The name of study area map.\n#'\n#' @param studyAreaMapPath  Character string. The path direct to the study area map.\n#'        Default is the current working directory.\n#' \n#' @param ecoregionMap,  Character string. The name of ecoregion map.\n#'        \n#' \n#' @param ecoregionMapPath  Character string. The path direct to the ecoregion map.\n#'        Default is the current working directory.\n#' \n#' @param cellSize  Numeric. Determine the cell size for the generated map\n#'        Default is 200 meters\n#'\n#' @return \n#'\n#' @note no note\n#'\n#' @seealso no\n#'\n#' @include \n#' @export\n#' @docType methods\n#' @rdname ecoregionClassification\n#'\n#' @author Yong Luo\n#'\n#' @examples\n#' \\dontrun{\n#' \n#' }\nsetGeneric(\"ecoregionClassification\", function(studyAreaMap, studyAreaMapPath,\n                                               ecoregionMap, ecoregionMapPath,\n                                               cellSize) {\n  standardGeneric(\"ecoregionClassification\")\n})\n\n#' @export\n#' @rdname moduleCoverage\nsetMethod(\n  \"ecoregionClassification\",\n  signature = c(studyAreaMap = \"character\", studyAreaMapPath = \"character\",\n                ecoregionMap = \"character\", ecoregionMapPath = \"character\",\n                cellSize = \"numeric\"),\n  definition = function(studyAreaMap, studyAreaMapPath,\n                        ecoregionMap, ecoregionMapPath,\n                        cellSize) {\n    studyarea <- readRDS(file.path(studyAreaMapPath, studyAreaMap)) \n    ecoregionMap <- rgdal::readOGR(file.path(ecoregionMapPath, ecoregionMap),\n                                   layer = \"ecozones\")\n    studyarea <- spTransform(studyarea, crs(ecoregionMap))\n    studyareaecoregion <- crop(ecoregionMap, extent(studyarea))\n    r <- raster(ncol=round(1000*earthDist(long1=extent(studyareaecoregion)[1],\n                                          lat1=extent(studyareaecoregion)[3],\n                                          long2=extent(studyareaecoregion)[1],\n                                          lat2=extent(studyareaecoregion)[4]))/cellSize,\n                nrow=round(1000*earthDist(long1=extent(studyareaecoregion)[1],\n                                          lat1=extent(studyareaecoregion)[3],\n                                          long2=extent(studyareaecoregion)[2],\n                                          lat2=extent(studyareaecoregion)[3]))/cellSize)# based on south size )\n    extent(r) <- extent(studyareaecoregion)\n    crs(r) <- crs(studyareaecoregion)\n    studyarea1 <- rasterize(studyarea, r, 1)\n    studyareaecoregion <- rasterize(studyareaecoregion, r, \"ECOZONE\")\n    studyareaecoregion <- mask(studyareaecoregion, studyarea)\n    return(studyareaecoregion)\n  })\n\n#' @export\n#' @rdname ecoregionClassification\nsetMethod(\n  \"ecoregionClassification\",\n  signature = c(studyAreaMap = \"character\", studyAreaMapPath = \"missing\",\n                ecoregionMap = \"character\", ecoregionMapPath = \"character\",\n                cellSize = \"numeric\"),\n  definition = function(studyAreaMap, ecoregionMap,\n                        ecoregionMapPath, cellSize) {\n    ecoregionClassification(studyAreaMap = studyAreaMap, studyAreaMapPath = \".\",\n                            ecoregionMap = ecoregionMap, ecoregionMapPath = ecoregionMapPath,\n                            cellSize = cellSize)\n  })    \n\n#' @export\n#' @rdname ecoregionClassification\nsetMethod(\n  \"ecoregionClassification\",\n  signature = c(studyAreaMap = \"character\", studyAreaMapPath = \"character\",\n                ecoregionMap = \"character\", ecoregionMapPath = \"missing\",\n                cellSize = \"numeric\"),\n  definition = function(studyAreaMap, studyAreaMapPath,\n                        ecoregionMap, cellSize) {\n    ecoregionClassification(studyAreaMap = studyAreaMap, studyAreaMapPath = studyAreaMapPath,\n                            ecoregionMap = ecoregionMap, ecoregionMapPath = \".\",\n                            cellSize = cellSize)\n  })   \n\n#' @export\n#' @rdname ecoregionClassification\nsetMethod(\n  \"ecoregionClassification\",\n  signature = c(studyAreaMap = \"character\", studyAreaMapPath = \"character\",\n                ecoregionMap = \"character\", ecoregionMapPath = \"character\",\n                cellSize = \"missing\"),\n  definition = function(studyAreaMap, studyAreaMapPath,\n                        ecoregionMap, ecoregionMapPath) {\n    ecoregionClassification(studyAreaMap = studyAreaMap, studyAreaMapPath = studyAreaMapPath,\n                            ecoregionMap = ecoregionMap, ecoregionMapPath = ecoregionMapPath,\n                            cellSize = 200)\n  }) \n\n#' @export\n#' @rdname ecoregionClassification\nsetMethod(\n  \"ecoregionClassification\",\n  signature = c(studyAreaMap = \"character\", studyAreaMapPath = \"missing\",\n                ecoregionMap = \"character\", ecoregionMapPath = \"missing\",\n                cellSize = \"numeric\"),\n  definition = function(studyAreaMap, ecoregionMap, cellSize) {\n    ecoregionClassification(studyAreaMap = studyAreaMap, studyAreaMapPath = \".\",\n                            ecoregionMap = ecoregionMap, ecoregionMapPath = \".\",\n                            cellSize = cellSize)\n  }) \n\n#' @export\n#' @rdname ecoregionClassification\nsetMethod(\n  \"ecoregionClassification\",\n  signature = c(studyAreaMap = \"character\", studyAreaMapPath = \"missing\",\n                ecoregionMap = \"character\", ecoregionMapPath = \"character\",\n                cellSize = \"missing\"),\n  definition = function(studyAreaMap, ecoregionMap, ecoregionMapPath) {\n    ecoregionClassification(studyAreaMap = studyAreaMap, studyAreaMapPath = \".\",\n                            ecoregionMap = ecoregionMap, ecoregionMapPath = ecoregionMapPath,\n                            cellSize = 200)\n  }) \n\n#' @export\n#' @rdname ecoregionClassification\nsetMethod(\n  \"ecoregionClassification\",\n  signature = c(studyAreaMap = \"character\", studyAreaMapPath = \"character\",\n                ecoregionMap = \"character\", ecoregionMapPath = \"missing\",\n                cellSize = \"missing\"),\n  definition = function(studyAreaMap, studyAreaMapPath, ecoregionMap) {\n    ecoregionClassification(studyAreaMap = studyAreaMap, studyAreaMapPath = studyAreaMapPath,\n                            ecoregionMap = ecoregionMap, ecoregionMapPath = \".\",\n                            cellSize = 200)\n  }) \n\n#' @export\n#' @rdname ecoregionClassification\nsetMethod(\n  \"ecoregionClassification\",\n  signature = c(studyAreaMap = \"character\", studyAreaMapPath = \"missing\",\n                ecoregionMap = \"character\", ecoregionMapPath = \"missing\",\n                cellSize = \"missing\"),\n  definition = function(studyAreaMap, ecoregionMap) {\n    ecoregionClassification(studyAreaMap = studyAreaMap, studyAreaMapPath = \".\",\n                            ecoregionMap = ecoregionMap, ecoregionMapPath = \".\",\n                            cellSize = 200)\n  }) \n\n# classify ecoregion based ecoregion map in the study region\n\n\n\nearthDist <- function (long1, lat1, long2, lat2)\n{\n  rad <- pi/180\n  a1 <- lat1 * rad\n  a2 <- long1 * rad\n  b1 <- lat2 * rad\n  b2 <- long2 * rad\n  dlon <- b2 - a2\n  dlat <- b1 - a1\n  a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2\n  c <- 2 * atan2(sqrt(a), sqrt(1 - a))\n  R <- 6378.145\n  d <- R * c\n  return(d)\n}\n\n\n\n\n\n\n",
    "created" : 1460583357741.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1473093530",
    "id" : "6B4E7C40",
    "lastKnownWriteTime" : 1460583377,
    "path" : "~/GitHub/landwebNRV/landwebNRV/R/ecoregionClassification.R",
    "project_path" : "R/ecoregionClassification.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}