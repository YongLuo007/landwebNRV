{
    "contents" : "################################################################################\n#' this function is to extract PSP inventory data from Alberta  \n#' \n#' \n#' @param filePath  Character string. The path lead to the fold that contains the data.\n#'\n#' \n#' @param pspType,  Character string. It tells which data source from,\n#'                  ie., Mature or Juvenile. It must be one of these\n#'        \n#'\n#' @return  \n#'                      \n#'\n#' @note no note\n#'\n#' @seealso no\n#'\n#' @include \n#' @export\n#' @docType methods\n#' @rdname obtainTreeDataAB\n#'\n#' @author Yong Luo\n#'\n#' @examples\n#' \\dontrun{\n#' \n#' }\nsetGeneric(\"obtainTreeDataAB\", function(filePath, pspType) {\n  standardGeneric(\"obtainTreeDataAB\")\n})\n\n#' @export\n#' @rdname obtainTreeDataAB\nsetMethod(\n  \"obtainTreeDataAB\",\n  signature = c(filePath = \"character\", \n                pspType = \"character\"),\n  definition = function(filePath, \n                        pspType) {\n    tepdir <- tempdir()\n    if(pspType == \"Mature\"){\n      headData <- data.table(Agency = integer(), Groupnumber = integer(), Plotnumber = integer(),\n                             Measurementnumber = integer(), MeasureYear = integer(), MeasureMonth = integer(),\n                             MeasureDay = integer(), Legalsubdivision = integer(), Section = integer(),\n                             Township = integer(), Range = integer(), Meridian = integer(),\n                             Plottreatment = integer(), Imperial = logical(),\n                             Recordtype = integer(), Treeplotsize = integer(),\n                             Saplingplotsize = integer(), Regenplotsize = integer(),\n                             AVIinterpretedoverstory = character(), AVIinterpretedunderstory = character(),\n                             Location = integer(), Slope_percent = integer(),\n                             Aspect = character(), Elevation = integer(),\n                             Erosionpotential = integer(), Drainage = integer(),\n                             Depth_to_mineral_soil = integer(), Surface_veg_type = integer(),\n                             Groud_coverage = integer(), Access = integer(),\n                             Plot_damage = integer(), Buffer_damage = integer(),\n                             Establish_year = integer())\n      treeData <- data.table(Agency = integer(), Groupnumber = integer(), \n                             Plotnumber = integer(), Measurementnumber = integer(), \n                             MeasureYear = integer(), MeasureMonth = integer(),\n                             MeasureDay = integer(), Legalsubdivision = integer(),\n                             Section = integer(), Township = integer(), Range = integer(), \n                             Meridian = integer(), Plottreatment = integer(), \n                             Imperial = logical(), Recordtype = integer(), \n                             Treenumber = integer(), Species = character(), \n                             DBH = integer(), Height = integer(), \n                             Heighttolivecrown = integer(), Crownclass = character(),\n                             Conditioncode1 = integer(), Conditioncode2 = integer(), \n                             Conditioncode3 = integer(), DBHage = integer(), \n                             Stumpage = integer(), Incrementprevioustenyears = integer(), \n                             Incrementpreviousyears = integer(), \n                             Azimuth = integer(), Distance = integer(),\n                             Treeplotsize = integer(), Saplingplotsize = integer(), \n                             Regenerationplotsize = integer(), Establishmentyear = integer(), \n                             Crownstatus = character(), Crownwidthnorth = integer(), \n                             Crownwidthwest = integer(), \n                             Crownwidthsouth = integer(), Crownwidtheast = integer())\n      regenData <- data.table(Agency = integer(), Groupnumber = integer(),\n                              Plotnumber = integer(), \n                              Measurementnumber = integer(), MeasureYear = integer(), \n                              MeasureMonth = integer(), MeasureDay = integer(), \n                              Legalsubdivision = integer(), Section = integer(), \n                              Township = integer(), Range = integer(), Meridian = integer(), \n                              Plottreatment = integer(), Imperial = logical(), Recordtype = integer(), \n                              Treenumber = integer(), Species = character(), \n                              Regeneration_in_height_class1 = integer(), \n                              Regeneration_in_height_class2 = integer(), \n                              Regeneration_in_height_class3 = integer(), \n                              Regeneration_in_height_class4 = integer(), \n                              Regeneration_in_height_class5 = integer(), \n                              Treeplotsize = integer(), Saplingplotsize = integer(), \n                              Regenerationplotsize = integer(), \n                              Establishmentyear = integer())\n      for(i in dir(filePath, pattern = \"*.DAT\")){\n        if(file.exists(file.path(tepdir, \"temp.csv\"))){\n          file.remove(file.path(tepdir, \"temp.csv\"))\n        }\n        file.copy(file.path(filePath, i),file.path(tepdir, \"temp.csv\"))\n        mdata<-read.csv(file.path(tepdir, \"temp.csv\"),\n                        header = FALSE,\n                        stringsAsFactors = FALSE) \n        headData <- rbindlist(list(headData, obtainHeadDataABMature(mdata)))\n        \n        treeData <- rbindlist(list(treeData,obtainTreeDataABMature(mdata)))\n        \n        regenData <- rbindlist(list(regenData,obtainRegenDataABMature(mdata)))\n        \n      }\n    } else if (pspType == \"Juvenile\"){\n      treeData <- data.table(Plotnumber = integer(), MeasureYear = integer(), \n                             MeasureMonth = integer(), Recordtype = integer(), \n                             Treenumber = integer(), RegenPlot = integer(), \n                             Species = character(),  Treetype = character(), \n                             Birthyear = integer(), Height = integer(), \n                             DBH = integer(), Conditioncode1 = integer(), \n                             Conditioncode2 = integer(), Conditioncode3 = integer(), \n                             LiveCrownHeight = integer(), CrownClass = character(), \n                             Azimuth = integer(), Distance = integer(), \n                             Age = integer(), competitionHeight = integer(), \n                             competitionType = integer(),  \n                             RootCollarDiameter = integer(), \n                             CrownStat = character(), CrownN = integer(), \n                             CrownW = integer(), CrownS = integer(), \n                             CrownE = integer(), \n                             PlotTreatmentType = integer())\n      filePath <- \"C:/Users/Yong Luo/Documents/PSPs/AB_juveniles\"\n      for(i in dir(filePath, pattern = \"*.DAT\")){\n        if(file.exists(file.path(tepdir, \"temp.csv\"))){\n          file.remove(file.path(tepdir, \"temp.csv\"))\n        }\n        file.copy(file.path(filePath, i),file.path(tepdir, \"temp.csv\"))\n        mdata<-read.csv(file.path(tepdir, \"temp.csv\"),\n                        header = FALSE,\n                        stringsAsFactors = FALSE) \n        treeData <- rbindlist(list(treeData, obtainTreeDataABJuvenile(mdata)))\n      }\n    } else {\n      stop(\"please specify pspType correctly.\")\n    }\n    if(pspType == \"Mature\"){\n      return(list(headData = headData, treeData = treeData, regenData = regenData))\n    } else if (pspType == \"Juvenile\"){\n      return(list(headData = NA, treeData = treeData, regenData = NA))\n    }\n  })\n\nsetGeneric(\"obtainHeadDataABMature\", function(rawdata) {\n  standardGeneric(\"obtainHeadDataABMature\")\n})\n\n#' @export\n#' @rdname obtainHeadDataABMature\nsetMethod(\n  \"obtainHeadDataABMature\",\n  signature = c(rawdata = \"data.frame\"),\n  definition = function(rawdata) {\n    output <- data.table::data.table(matrix(nrow = nrow(rawdata), ncol = 33))\n    rawdata <- as.character(rawdata[,1])\n    output[ , 1] <- substr(rawdata, 1, 2)\n    output[ , 2] <- substr(rawdata, 3, 12)\n    output[ , 3] <- substr(rawdata, 13, 13)\n    output[ , 4] <- substr(rawdata, 14, 15)\n    output[ , 5] <- substr(rawdata, 16, 19)\n    output[ , 6] <- substr(rawdata, 20, 21)\n    output[ , 7] <- substr(rawdata, 22, 23)\n    output[ , 8] <- substr(rawdata, 24, 25)\n    output[ , 9] <- substr(rawdata, 26, 27)\n    output[ , 10] <- substr(rawdata, 28, 30)\n    output[ , 11] <- substr(rawdata, 31, 32)\n    output[ , 12] <- substr(rawdata, 33, 33)\n    output[ , 13] <- substr(rawdata, 34, 36)\n    output[ , 14] <- substr(rawdata, 37, 37)\n    output[ , 15] <- substr(rawdata, 38, 39)\n    output[ , 16] <- substr(rawdata, 40, 44)\n    output[ , 17] <- substr(rawdata, 45, 48)\n    output[ , 18] <- substr(rawdata, 49, 52)\n    output[ , 19] <- substr(rawdata, 53, 73)\n    output[ , 20] <- substr(rawdata, 74, 94)\n    output[ , 21] <- substr(rawdata, 95, 95)\n    output[ , 22] <- substr(rawdata, 96, 98)\n    output[ , 23] <- substr(rawdata, 99, 100)\n    output[ , 24] <- substr(rawdata, 101, 104)\n    output[ , 25] <- substr(rawdata, 105, 105)\n    output[ , 26] <- substr(rawdata, 106, 106)\n    output[ , 27] <- substr(rawdata, 107, 108)\n    output[ , 28] <- substr(rawdata, 109, 109)\n    output[ , 29] <- substr(rawdata, 110, 112)\n    output[ , 30] <- substr(rawdata, 113, 113)\n    output[ , 31] <- substr(rawdata, 114, 114)\n    output[ , 32] <- substr(rawdata, 115, 115)\n    output[ , 33] <- substr(rawdata, 116, 119)\n    names(output) <- c(\"Agency\",\"Groupnumber\",\"Plotnumber\",\"Measurementnumber\",\"MeasureYear\",\"MeasureMonth\",\"MeasureDay\",\n                       \"Legalsubdivision\",\"Section\",\"Township\",\"Range\",\"Meridian\",\"Plottreatment\",\"Imperial\",\"Recordtype\",\n                       \"Treeplotsize\",\"Saplingplotsize\",\"Regenplotsize\",\"AVIinterpretedoverstory\",\"AVIinterpretedunderstory\",\n                       \"Location\",\"Slope_percent\",\"Aspect\",\n                       \"Elevation\",\"Erosionpotential\",\"Drainage\",\"Depth_to_mineral_soil\",\"Surface_veg_type\",\n                       \"Groud_coverage\",\"Access\",\"Plot_damage\",\"Buffer_damage\",\"Establish_year\")\n    output <- output[,Recordtype:=as.integer(Recordtype)][Recordtype == 1,]\n    output[,':='(Agency = as.integer(Agency), Groupnumber = as.integer(Groupnumber),\n                 Plotnumber = as.integer(Plotnumber), Measurementnumber = as.integer(Measurementnumber),\n                 MeasureYear = as.integer(MeasureYear), MeasureMonth = as.integer(MeasureMonth),\n                 MeasureDay = as.integer(MeasureDay), Legalsubdivision = as.integer(Legalsubdivision),\n                 Section = as.integer(Section), Township = as.integer(Township),\n                 Range = as.integer(Range), Meridian = as.integer(Meridian),\n                 Plottreatment = as.integer(Plottreatment), Imperial = as.logical(Imperial),\n                 Recordtype = as.integer(Recordtype), Treeplotsize = as.integer(Treeplotsize),\n                 Saplingplotsize = as.integer(Saplingplotsize), Regenplotsize = as.integer(Regenplotsize),\n                 AVIinterpretedoverstory = as.character(AVIinterpretedoverstory), \n                 AVIinterpretedunderstory = as.character(AVIinterpretedunderstory),\n                 Location = as.integer(Location), Slope_percent = as.integer(Slope_percent),\n                 Aspect = as.character(Aspect), Elevation = as.integer(Elevation),\n                 Erosionpotential = as.integer(Erosionpotential), Drainage = as.integer(Drainage),\n                 Depth_to_mineral_soil = as.numeric(Depth_to_mineral_soil),\n                 Surface_veg_type = as.integer(Surface_veg_type),\n                 Groud_coverage = as.integer(Groud_coverage), Access = as.integer(Access),\n                 Plot_damage = as.integer(Plot_damage), Buffer_damage = as.integer(Buffer_damage),\n                 Establish_year = as.integer(Establish_year))]\n    \n    return(output)\n  })\n\n\nsetGeneric(\"obtainTreeDataABMature\", function(rawdata) {\n  standardGeneric(\"obtainTreeDataABMature\")\n})\n\n#' @export\n#' @rdname obtainTreeDataABMature\nsetMethod(\n  \"obtainTreeDataABMature\",\n  signature = c(rawdata = \"data.frame\"),\n  definition = function(rawdata) {\n    output <- data.table(matrix(nrow = nrow(rawdata), ncol = 39))\n    rawdata <- as.character(rawdata[,1])\n    output[ , 1]<-substr(rawdata, 1, 2)\n    output[ , 2]<-substr(rawdata, 3, 12)\n    output[ , 3]<-substr(rawdata, 13, 13)\n    output[ , 4]<-substr(rawdata, 14, 15)\n    output[ , 5]<-substr(rawdata, 16, 19)\n    output[ , 6]<-substr(rawdata, 20, 21)\n    output[ , 7]<-substr(rawdata, 22, 23)\n    output[ , 8]<-substr(rawdata, 24, 25)\n    output[ , 9]<-substr(rawdata, 26, 27)\n    output[ , 10]<-substr(rawdata, 28, 30)\n    output[ , 11]<-substr(rawdata, 31, 32)\n    output[ , 12]<-substr(rawdata, 33, 33)\n    output[ , 13]<-substr(rawdata, 34, 36)\n    output[ , 14]<-substr(rawdata, 37, 37)\n    output[ , 15]<-substr(rawdata, 38, 39)\n    output[ , 16]<-substr(rawdata, 40, 43)\n    output[ , 17]<-substr(rawdata, 44, 45)\n    output[ , 18]<-substr(rawdata, 46, 49)\n    output[ , 19]<-substr(rawdata, 50, 53)\n    output[ , 20]<-substr(rawdata, 54, 57)\n    output[ , 21]<-substr(rawdata, 58, 58)\n    output[ , 22]<-substr(rawdata, 59, 60)\n    output[ , 23]<-substr(rawdata, 61, 62)\n    output[ , 24]<-substr(rawdata, 63, 64)\n    output[ , 25]<-substr(rawdata, 65, 67)\n    output[ , 26]<-substr(rawdata, 68, 70)\n    output[ , 27]<-substr(rawdata, 71, 73)\n    output[ , 28]<-substr(rawdata, 74, 76)\n    output[ , 29]<-substr(rawdata, 77, 79)\n    output[ , 30]<-substr(rawdata, 80, 82)\n    output[ , 31]<-substr(rawdata, 83, 89)\n    output[ , 32]<-substr(rawdata, 90, 96)\n    output[ , 33]<-substr(rawdata, 97, 103)\n    output[ , 34]<-substr(rawdata, 104, 107)\n    output[ , 35]<-substr(rawdata, 108, 108)\n    output[ , 36]<-substr(rawdata, 109, 111)\n    output[ , 37]<-substr(rawdata, 112, 114)\n    output[ , 38]<-substr(rawdata, 115, 117)\n    output[ , 39]<-substr(rawdata, 118, 121)\n    names(output)<-c(\"Agency\", \"Groupnumber\", \"Plotnumber\", \"Measurementnumber\", \n                     \"MeasureYear\", \"MeasureMonth\", \"MeasureDay\", \n                     \"Legalsubdivision\", \"Section\", \"Township\", \"Range\", \n                     \"Meridian\", \"Plottreatment\", \"Imperial\", \"Recordtype\", \n                     \"Treenumber\", \"Species\", \"DBH\", \"Height\", \"Heighttolivecrown\", \n                     \"Crownclass\", \"Conditioncode1\", \"Conditioncode2\", \n                     \"Conditioncode3\", \"DBHage\", \"Stumpage\",\n                     \"Incrementprevioustenyears\", \"Incrementpreviousyears\", \n                     \"Azimuth\", \"Distance\", \"Treeplotsize\", \"Saplingplotsize\", \n                     \"Regenerationplotsize\", \"Establishmentyear\", \n                     \"Crownstatus\", \"Crownwidthnorth\", \"Crownwidthwest\", \n                     \"Crownwidthsouth\", \"Crownwidtheast\")\n    output <- output[,Recordtype := as.integer(Recordtype)][Recordtype == 2,]\n    output[,':='(Agency = as.integer(Agency), Groupnumber = as.integer(Groupnumber), \n                 Plotnumber = as.integer(Plotnumber), Measurementnumber = as.integer(Measurementnumber), \n                 MeasureYear = as.integer(MeasureYear), MeasureMonth = as.integer(MeasureMonth),\n                 MeasureDay = as.integer(MeasureDay), Legalsubdivision = as.integer(Legalsubdivision),\n                 Section = as.integer(Section), Township = as.integer(Township), Range = as.integer(Range), \n                 Meridian = as.integer(Meridian), Plottreatment = as.integer(Plottreatment), \n                 Imperial = as.logical(Imperial), Recordtype = as.integer(Recordtype), \n                 Treenumber = as.integer(Treenumber), Species = as.character(Species), \n                 DBH = as.integer(DBH), Height = as.integer(Height), \n                 Heighttolivecrown = as.integer(Heighttolivecrown), \n                 Crownclass = as.character(Crownclass),\n                 Conditioncode1 = as.integer(Conditioncode1), Conditioncode2 = as.integer(Conditioncode2), \n                 Conditioncode3 = as.integer(Conditioncode3), DBHage = as.integer(DBHage), \n                 Stumpage = as.integer(Stumpage), \n                 Incrementprevioustenyears = as.integer(Incrementprevioustenyears), \n                 Incrementpreviousyears = as.integer(Incrementpreviousyears), \n                 Azimuth = as.integer(Azimuth), Distance = as.integer(Distance),\n                 Treeplotsize = as.integer(Treeplotsize),\n                 Saplingplotsize = as.integer(Saplingplotsize), \n                 Regenerationplotsize = as.integer(Regenerationplotsize), \n                 Establishmentyear = as.integer(Establishmentyear), \n                 Crownstatus = as.character(Crownstatus), Crownwidthnorth = as.integer(Crownwidthnorth), \n                 Crownwidthwest = as.integer(Crownwidthwest), \n                 Crownwidthsouth = as.integer(Crownwidthsouth), \n                 Crownwidtheast = as.integer(Crownwidtheast))]\n    return(output)\n  })\n    \n\nsetGeneric(\"obtainRegenDataABMature\", function(rawdata) {\n  standardGeneric(\"obtainRegenDataABMature\")\n})\n\n#' @export\n#' @rdname obtainRegenDataABMature\nsetMethod(\n  \"obtainRegenDataABMature\",\n  signature = c(rawdata = \"data.frame\"),\n  definition = function(rawdata) {\n    output <- data.table(matrix(nrow = nrow(rawdata), ncol = 26))\n    rawdata <- as.character(rawdata[, 1])\n    output[ , 1] <- substr(rawdata, 1, 2)\n    output[ , 2] <- substr(rawdata, 3, 12)\n    output[ , 3] <- substr(rawdata, 13, 13)\n    output[ , 4] <- substr(rawdata, 14, 15)\n    output[ , 5] <- substr(rawdata, 16, 19)\n    output[ , 6] <- substr(rawdata, 20, 21)\n    output[ , 7] <- substr(rawdata, 22, 23)\n    output[ , 8] <- substr(rawdata, 24, 25)\n    output[ , 9] <- substr(rawdata, 26, 27)\n    output[ , 10] <- substr(rawdata, 28, 30)\n    output[ , 11] <- substr(rawdata, 31, 32)\n    output[ , 12] <- substr(rawdata, 33, 33)\n    output[ , 13] <- substr(rawdata, 34, 36)\n    output[ , 14] <- substr(rawdata, 37, 37)\n    output[ , 15] <- substr(rawdata, 38, 39)\n    output[ , 16] <- substr(rawdata, 40, 43)\n    output[ , 17] <- substr(rawdata, 44, 45)\n    output[ , 18] <- substr(rawdata, 46, 48)\n    output[ , 19] <- substr(rawdata, 49, 51)\n    output[ , 20] <- substr(rawdata, 52, 54)\n    output[ , 21] <- substr(rawdata, 55, 57)\n    output[ , 22] <- substr(rawdata, 58, 60)\n    output[ , 23] <- substr(rawdata, 61, 67)\n    output[ , 24] <- substr(rawdata, 68, 74)\n    output[ , 25] <- substr(rawdata, 75, 81)\n    output[ , 26] <- substr(rawdata, 82, 85)\n    names(output) <- c(\"Agency\", \"Groupnumber\", \"Plotnumber\", \n                     \"Measurementnumber\", \"MeasureYear\", \n                     \"MeasureMonth\", \"MeasureDay\", \n                     \"Legalsubdivision\", \"Section\", \n                     \"Township\", \"Range\", \"Meridian\", \n                     \"Plottreatment\", \"Imperial\", \"Recordtype\", \n                     \"Treenumber\", \"Species\", \n                     \"Regeneration_in_height_class1\", \n                     \"Regeneration_in_height_class2\", \n                     \"Regeneration_in_height_class3\", \n                     \"Regeneration_in_height_class4\", \n                     \"Regeneration_in_height_class5\", \n                     \"Treeplotsize\", \"Saplingplotsize\", \n                     \"Regenerationplotsize\", \n                     \"Establishmentyear\")\n    output <- output[,Recordtype := as.integer(Recordtype)][Recordtype==3,]\n    output[,':='(Agency = as.integer(Agency), Groupnumber = as.integer(Groupnumber),\n                 Plotnumber = as.integer(Plotnumber), \n                 Measurementnumber = as.integer(Measurementnumber), \n                 MeasureYear = as.integer(MeasureYear), \n                 MeasureMonth = as.integer(MeasureMonth), \n                 MeasureDay = as.integer(MeasureDay), \n                 Legalsubdivision = as.integer(Legalsubdivision), \n                 Section = as.integer(Section), \n                 Township = as.integer(Township), Range = as.integer(Range),\n                 Meridian = as.integer(Meridian), \n                 Plottreatment = as.integer(Plottreatment), \n                 Imperial = as.logical(Imperial),\n                 Recordtype = as.integer(Recordtype), \n                 Treenumber = as.integer(Treenumber), \n                 Species = as.character(Species), \n                 Regeneration_in_height_class1 = as.integer(Regeneration_in_height_class1), \n                 Regeneration_in_height_class2 = as.integer(Regeneration_in_height_class2), \n                 Regeneration_in_height_class3 = as.integer(Regeneration_in_height_class3), \n                 Regeneration_in_height_class4 = as.integer(Regeneration_in_height_class4), \n                 Regeneration_in_height_class5 = as.integer(Regeneration_in_height_class5), \n                 Treeplotsize = as.integer(Treeplotsize), \n                 Saplingplotsize = as.integer(Saplingplotsize), \n                 Regenerationplotsize = as.integer(Regenerationplotsize), \n                 Establishmentyear = as.integer(Establishmentyear))]\n    return(output)\n  })\n\n\nsetGeneric(\"obtainTreeDataABJuvenile\", function(rawdata) {\n  standardGeneric(\"obtainTreeDataABJuvenile\")\n})\n\n#' @export\n#' @rdname obtainTreeDataABJuvenile\nsetMethod(\n  \"obtainTreeDataABJuvenile\",\n  signature = c(rawdata = \"data.frame\"),\n  definition = function(rawdata) {\n    output <- data.table(matrix(nrow = nrow(rawdata), ncol = 28))\n    rawdata <- as.character(rawdata[, 1])\n    output[ , 1] <- substr(rawdata, 1, 5)\n    output[ , 2] <- substr(rawdata, 6, 9)\n    output[ , 3] <- substr(rawdata, 10, 11)\n    output[ , 4] <- substr(rawdata, 12, 13)\n    output[ , 5] <- substr(rawdata, 14, 17)\n    output[ , 6] <- substr(rawdata, 18, 18)\n    output[ , 7] <- substr(rawdata, 19, 20)\n    output[ , 8] <- substr(rawdata, 21, 21)\n    output[ , 9] <- substr(rawdata, 22, 25)\n    output[ , 10] <- substr(rawdata, 26, 29)\n    output[ , 11] <- substr(rawdata, 30, 33)\n    output[ , 12] <- substr(rawdata, 34, 35)\n    output[ , 13] <- substr(rawdata, 36, 37)\n    output[ , 14] <- substr(rawdata, 38, 39)\n    output[ , 15] <- substr(rawdata, 40, 43)\n    output[ , 16] <- substr(rawdata, 44, 44)\n    output[ , 17] <- substr(rawdata, 45, 47)\n    output[ , 18] <- substr(rawdata, 48, 50)\n    output[ , 19] <- substr(rawdata, 51, 53)\n    output[ , 20] <- substr(rawdata, 54, 54)\n    output[ , 21] <- substr(rawdata, 55, 55)\n    output[ , 22] <- substr(rawdata, 56, 59)\n    output[ , 23] <- substr(rawdata, 60, 60)\n    output[ , 24] <- substr(rawdata, 61, 63)\n    output[ , 25] <- substr(rawdata, 64, 66)\n    output[ , 26] <- substr(rawdata, 67, 69)\n    output[ , 27] <- substr(rawdata, 70, 72)\n    output[ , 28] <- substr(rawdata, 73, 74)\n    names(output)<-c(\"Plotnumber\",\"MeasureYear\",\n                     \"MeasureMonth\",\"Recordtype\",\n                     \"Treenumber\",\"RegenPlot\",\n                     \"Species\", \"Treetype\",\n                     \"Birthyear\",\"Height\",\n                     \"DBH\",\"Conditioncode1\",\n                     \"Conditioncode2\",\"Conditioncode3\",\n                     \"LiveCrownHeight\",\"CrownClass\",\n                     \"Azimuth\",\"Distance\",\n                     \"Age\",\"competitionHeight\",\n                     \"competitionType\", \n                     \"RootCollarDiameter\",\n                     \"CrownStat\",\"CrownN\",\n                     \"CrownW\",\"CrownS\",\n                     \"CrownE\",\"PlotTreatmentType\")\n    output[,':='(Plotnumber = as.integer(Plotnumber), MeasureYear = as.integer(MeasureYear), \n                 MeasureMonth = as.integer(MeasureMonth), Recordtype = as.integer(Recordtype), \n                 Treenumber = as.integer(Treenumber), RegenPlot = as.integer(RegenPlot), \n                 Species = as.character(Species),  Treetype = as.character(Treetype), \n                 Birthyear = as.integer(Birthyear), Height = as.integer(Height), \n                 DBH = as.integer(DBH), Conditioncode1 = as.integer(Conditioncode1), \n                 Conditioncode2 = as.integer(Conditioncode2), Conditioncode3 = as.integer(Conditioncode3), \n                 LiveCrownHeight = as.integer(LiveCrownHeight), \n                 CrownClass = as.character(CrownClass), \n                 Azimuth = as.integer(Azimuth), Distance = as.integer(Distance), \n                 Age = as.integer(Age), competitionHeight = as.integer(competitionHeight), \n                 competitionType = as.integer(competitionType),  \n                 RootCollarDiameter = as.integer(RootCollarDiameter), \n                 CrownStat = as.character(CrownStat), CrownN = as.integer(CrownN), \n                 CrownW = as.integer(CrownW), CrownS = as.integer(CrownS), \n                 CrownE = as.integer(CrownE),\n                 PlotTreatmentType = as.integer(PlotTreatmentType))]\n    return(output)\n  })\n    \n\n\n\n",
    "created" : 1460591218500.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "969378955",
    "id" : "8545679",
    "lastKnownWriteTime" : 1460656904,
    "path" : "~/GitHub/landwebNRV/landwebNRV/R/obtainTreeDataAB.R",
    "project_path" : "R/obtainTreeDataAB.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}