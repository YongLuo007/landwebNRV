{
    "contents" : "################################################################################\n#' purify Alberta mature PSP data that derived from original DAT files\n#' \n#' \n#' @param treeDataRaw  data table, which is the raw tree data from DAT file, recordType == 2\n#'                  treeData can be obtained using obtainTreeDataAB function\n#'\n#' \n#' @param headDataRaw data.table, which is PSPDATA2015B, provided by AB\n#'        \n#'\n#' @return  two data tables, the first one head data, which contains the location and SA info.\n#'                           the second one is purified tree data, which contains inividual tree infor.\n#'                           for the tree data, all trees are alive.\n#'                      \n#'\n#' @note no note\n#'\n#' @seealso no\n#'\n#' @include \n#' @export\n#' @docType methods\n#' @rdname dataPurification_ABMature\n#'\n#' @author Yong Luo\n#'\n#' @examples\n#' \\dontrun{\n#' \n#' }\nsetGeneric(\"dataPurification_ABMature\", function(treeDataRaw, headDataRaw) {\n  standardGeneric(\"dataPurification_ABMature\")\n})\n#' @export\n#' @rdname dataPurification_ABMature\nsetMethod(\n  \"dataPurification_ABMature\",\n  signature = c(treeDataRaw = \"data.table\", \n                headDataRaw = \"data.table\"),\n  definition = function(treeDataRaw, headDataRaw) {\n    \n    # generate head data for each plot, unmanaged, SA available, location available\n    headData1 <- treeDataRaw[Treenumber == 0 & (!is.na(DBHage) | !is.na(Stumpage)),]\n    SADiff <- as.integer(mean(headData1[!is.na(DBHage) & !is.na(Stumpage)]$Stumpage-\n                                headData1[!is.na(DBHage) & !is.na(Stumpage)]$DBHage))\n    headData1 <- headData1[!is.na(DBHage) & is.na(Stumpage), Stumpage:=DBHage+SADiff][\n      ,.(Groupnumber, Plotnumber, MeasureYear, Stumpage)]\n    headData1[,firstMeasureYear:=min(MeasureYear), by = c(\"Groupnumber\")][\n      ,treeAge:=Stumpage-MeasureYear+firstMeasureYear]\n    headData1 <- headData1[,.(baseYear = mean(firstMeasureYear), baseSA = round(mean(treeAge))), \n                           by = c(\"Groupnumber\")]\n    headData1[,Groupnumber:=as.character(Groupnumber)]\n    \n    setnames(headDataRaw, c(\"PLOT..\", \"TYPE\", \"PLOTS\", \"DEC...LONG\", \"DEC...LAT\",\n                          \"Plot.Size.m2\", \"Stand.origin\", \"Managed.\"),\n             c(\"Groupnumber\", \"Type\", \"NofSubplot\", \"Longitude\", \"Latitude\",\n               \"PlotSize\", \"StandOrigin\", \"Managed\"))\n    # select PSPs\n    headDataRaw <- headDataRaw[,.(Groupnumber, Type, NofSubplot, Longitude, Latitude,Easting,\n                              Northing, Elevation,\n                              PlotSize, StandOrigin, Managed)]\n    # select the plots with locations\n    headDataRaw <- headDataRaw[(Longitude !=0 & Latitude != 0) | (Northing != 0 & Easting != 0),]\n    # select plots unmanaged\n    headDataRaw <- headDataRaw[Managed == \"No\",]\n    \n    # joining the SA information\n    headData <- setkey(headDataRaw, Groupnumber)[setkey(headData1, Groupnumber), nomatch  = 0][\n      ,':='(Type = NULL, NofSubplot = NULL, StandOrigin = NULL, Managed = NULL)]\n    headData <- unique(headData, by = \"Groupnumber\")\n    \n    treeData <- treeDataRaw[Treenumber != 0,][\n      ,.(Groupnumber, Plotnumber, MeasureYear, Treenumber, \n         Species, DBH, Height, Conditioncode1, Conditioncode2, Conditioncode3, Treeplotsize)]\n    # remove DBH is not available\n    treeData <- treeData[!is.na(DBH) & DBH != 0,]\n    \n    treeData <- treeData[Groupnumber %in% unique(as.numeric(headData$Groupnumber))]\n    tempPlotID <- unique(treeData[,.(Groupnumber, Plotnumber)], by = c(\"Groupnumber\", \"Plotnumber\"))\n    tempPlotID[,PlotID := as.numeric(row.names(tempPlotID))]\n    setkey(tempPlotID, Groupnumber, Plotnumber)\n    treeData <- setkey(treeData, Groupnumber, Plotnumber)[tempPlotID, nomatch = 0]\n    \n\n      \n    # treeData condition check\n    treeDataLiving <- treeData[Conditioncode1 != 25 & Conditioncode1 != 61 &\n                                 Conditioncode1 != 79 & Conditioncode1 != 80,]\n    \n    treeDataLiving <- treeDataLiving[is.na(Conditioncode2) |\n                                       (Conditioncode2 != 25 & Conditioncode2 != 61 &\n                                          Conditioncode2 != 79 & Conditioncode2 != 80),]\n    treeDataLiving <- treeDataLiving[is.na(Conditioncode3) |\n                                       (Conditioncode3 != 25 & Conditioncode3 != 61 &\n                                          Conditioncode2 != 79 & Conditioncode2 != 80),]\n    treeDataLiving[,':='(Conditioncode1 = NULL, Conditioncode2 = NULL, Conditioncode3 = NULL)]\n    \n    # check the plot size\n    treeDataLiving[,plotsizetime:=as.numeric(length(unique(Treeplotsize))), by = c(\"PlotID\")]\n    \n    if(nrow(treeDataLiving[plotsizetime == 2,])>0){\n      plotids <- unique(treeDataLiving[plotsizetime == 2,]$PlotID)\n      for(plotid in plotids){\n        groupnumber <- as.character(unique(treeDataLiving[PlotID == plotid,]$Groupnumber))\n        plotsize <- as.numeric(headData[Groupnumber == groupnumber,]$PlotSize) # obtain plot size from headData\n        treeDataLiving[PlotID == plotid, Treeplotsize := plotsize]\n      }\n    }\n    setnames(treeDataLiving, \"Treeplotsize\", \"Plotsize\")\n    plotiddata <- setkey(unique(treeDataLiving[,.(PlotID, Groupnumber, Plotsize)], by = \"PlotID\"), Groupnumber)\n    headData[,':='(Groupnumber = as.numeric(Groupnumber),\n                   PlotSize = NULL)]\n    headData <- plotiddata[setkey(headData, Groupnumber), nomatch  = 0]\n    return(list(headData = headData[,':='(Longitude = -(Longitude), PlotSize=NULL)],\n                treeData = treeDataLiving[, ':='(DBH = DBH/10, plotsizetime = NULL, Plotsize = NULL)]))\n  })\n",
    "created" : 1461218576124.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3144136327",
    "id" : "837579BD",
    "lastKnownWriteTime" : 1461216267,
    "path" : "~/GitHub/landwebNRV/landwebNRV/R/dataPurification_ABMature.R",
    "project_path" : "R/dataPurification_ABMature.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}