{
    "contents" : "################################################################################\n#' purify Alberta mature PSP data that derived from original DAT files\n#' \n#' \n#' @param treeDataRaw  data table, which is the raw tree data from DAT file, recordType == 2\n#'                  treeData can be obtained using obtainTreeDataAB function\n#'\n#' \n#' @param plotHeaderDataRaw data.table, which is PSPDATA2015B, provided by AB\n#'        \n#'\n#' @return  two data tables, the first one is plot header data, which contains the location and SA info for each measure id.\n#'                           measureID is unique for each group, plotnumber and measureYear.\n#'                           the second one is purified tree data, which contains inividual tree infor.\n#'                           for the tree data, all trees are alive.\n#'                      \n#'\n#' @note no note\n#'\n#' @seealso no\n#'\n#' @include \n#' @export\n#' @docType methods\n#' @rdname dataPurification_ABMature\n#'\n#' @author Yong Luo\n#'\n#' @examples\n#' \\dontrun{\n#' \n#' }\nsetGeneric(\"dataPurification_ABMature\", function(treeDataRaw, plotHeaderDataRaw) {\n  standardGeneric(\"dataPurification_ABMature\")\n})\n#' @export\n#' @rdname dataPurification_ABMature\nsetMethod(\n  \"dataPurification_ABMature\",\n  signature = c(treeDataRaw = \"data.table\", \n                plotHeaderDataRaw = \"data.table\"),\n  definition = function(treeDataRaw, plotHeaderDataRaw) {\n    setnames(treeDataRaw, c(\"Groupnumber\", \"Plotnumber\", \"Treenumber\"),\n             c(\"GroupNumber\", \"PlotNumber\", \"TreeNumber\"))\n    treeDataRaw[, GroupNumber:=as.character(GroupNumber)]\n    setnames(plotHeaderDataRaw, c(\"PLOT..\", \"TYPE\", \"PLOTS\", \"DEC...LONG\", \"DEC...LAT\",\n                            \"Plot.Size.m2\", \"Stand.origin\", \"Managed.\"),\n             c(\"GroupNumber\", \"Type\", \"NofSubplot\", \"Longitude\", \"Latitude\",\n               \"PlotSize\", \"StandOrigin\", \"Managed\"))\n    headerData <- plotHeaderDataRaw[,.(GroupNumber, Type, NofSubplot, Longitude, Latitude,\n                                       Easting, Northing, Meridian, Elevation,\n                                  PlotSize, StandOrigin, Managed)]\n    headerData[,GroupNumber:=as.character(GroupNumber)]\n    headerData[Meridian == \"UTM 117(NAD83)\", Zone:=11]\n    headerData[Meridian == \"UTM 111(NAD83)\", Zone:=12]\n    \n    \n    # generate head data for each plot, unmanaged, SA available, location available\n    headerData_SA <- treeDataRaw[TreeNumber == 0 & (!is.na(DBHage) | !is.na(Stumpage)),]\n    SADiff <- as.integer(mean(headerData_SA[!is.na(DBHage) & !is.na(Stumpage)]$Stumpage-\n                                headerData_SA[!is.na(DBHage) & !is.na(Stumpage)]$DBHage))\n    headerData_SA <- headerData_SA[!is.na(DBHage) & is.na(Stumpage), Stumpage:=DBHage+SADiff][\n      ,.(GroupNumber, PlotNumber, MeasureYear, Stumpage)]\n    headerData_SA[,firstMeasureYear:=min(MeasureYear), by = c(\"GroupNumber\")][\n      ,treeAge:=Stumpage-MeasureYear+firstMeasureYear]\n    headerData_SA <- headerData_SA[,.(baseYear = mean(firstMeasureYear), baseSA = round(mean(treeAge))), \n                           by = c(\"GroupNumber\")]\n    \n    \n    # select PSPs\n\n    # select the plots with locations\n    headerData <- headerData[(Longitude !=0 & Latitude != 0) |\n                               (Northing != 0 & Easting != 0 & !is.na(Zone)),]\n    # select plots unmanaged\n    headerData <- headerData[Managed == \"No\",]\n    # joining the SA information\n    headerData <- setkey(headerData, GroupNumber)[setkey(headerData_SA, GroupNumber), nomatch  = 0][\n      ,':='(Type = NULL, NofSubplot = NULL, StandOrigin = NULL, Managed = NULL)]\n    headerData <- unique(headerData, by = \"GroupNumber\")\n    \n    treeData <- treeDataRaw[TreeNumber != 0,][\n      ,.(GroupNumber, PlotNumber, MeasureYear, TreeNumber, \n         Species, DBH, Height, Conditioncode1, Conditioncode2, Conditioncode3, Treeplotsize)]\n    # remove DBH is not available\n    treeData <- treeData[!is.na(DBH) & DBH != 0,]\n    \n    treeData <- treeData[GroupNumber %in% headerData$GroupNumber,]\n    tempPlotID <- unique(treeData[,.(GroupNumber, PlotNumber, MeasureYear)],\n                         by = c(\"GroupNumber\", \"PlotNumber\", \"MeasureYear\"))\n    tempPlotID[,MeasureID := as.numeric(row.names(tempPlotID))]\n    tempPlotID <- tempPlotID[,.(MeasureID, GroupNumber, PlotNumber, MeasureYear)]\n    setkey(tempPlotID, GroupNumber, PlotNumber, MeasureYear)\n    treeData <- tempPlotID[setkey(treeData, GroupNumber, PlotNumber, MeasureYear), nomatch = 0]\n\n    # treeData condition check\n    treeData <- treeData[Conditioncode1 != 25 & Conditioncode1 != 61 &\n                                 Conditioncode1 != 79 & Conditioncode1 != 80,]\n    \n    treeData <- treeData[is.na(Conditioncode2) |\n                                       (Conditioncode2 != 25 & Conditioncode2 != 61 &\n                                          Conditioncode2 != 79 & Conditioncode2 != 80),]\n    treeData <- treeData[is.na(Conditioncode3) |\n                                       (Conditioncode3 != 25 & Conditioncode3 != 61 &\n                                          Conditioncode2 != 79 & Conditioncode2 != 80),]\n    treeData[,':='(Conditioncode1 = NULL, Conditioncode2 = NULL, Conditioncode3 = NULL)]\n    \n    # check the plot size\n    treeData[,plotsizetime:=as.numeric(length(unique(Treeplotsize))), by = c(\"MeasureID\")]\n    \n    if(nrow(treeData[plotsizetime == 2,])>0){\n      plotids <- unique(treeData[plotsizetime == 2,]$MeasureID)\n      for(plotid in plotids){\n        groupnumber <- unique(treeData[MeasureID == plotid,]$GroupNumber)\n        plotsize <- as.numeric(headerData[GroupNumber == groupnumber,]$PlotSize) # obtain plot size from headData\n        treeData[MeasureID == plotid, Treeplotsize := plotsize]\n      }\n    } \n    \n    setnames(treeData, \"Treeplotsize\", \"PlotSize\")\n    measureiddata <- setkey(unique(treeData[,.(MeasureID, GroupNumber, PlotSize, MeasureYear)], by = \"MeasureID\"), GroupNumber)\n    headerData[, PlotSize := NULL]\n    headerData <- measureiddata[setkey(headerData, GroupNumber), nomatch  = 0][,Longitude := -(Longitude)]\n    treeData[,':='(DBH = DBH/10, PlotSize = NULL, plotsizetime = NULL)]\n    headerData[,MeasureID:=paste(\"ABPSPMature_\", MeasureID, sep = \"\")]\n    setnames(headerData, \"GroupNumber\", \"OrigPlotID1\")\n    headerData <- headerData[,.(MeasureID, OrigPlotID1, MeasureYear, Longitude,\n                                Latitude, Zone, Easting, Northing = as.numeric(Northing),\n                                PlotSize = PlotSize/10000, baseYear, baseSA)]\n    treeData[,MeasureID:=paste(\"ABPSPMature_\", MeasureID, sep = \"\")]\n    setnames(treeData, c(\"GroupNumber\", \"PlotNumber\"), \n             c(\"OrigPlotID1\", \"OrigPlotID2\"))\n    return(list(plotHeaderData = headerData,\n                treeData = treeData))\n  })\n",
    "created" : 1461738009874.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3567875336",
    "id" : "F7121EE4",
    "lastKnownWriteTime" : 1461739168,
    "path" : "~/GitHub/landwebNRV/landwebNRV/R/dataPurification_ABMature.R",
    "project_path" : "R/dataPurification_ABMature.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}