Longitude=LONG_DEG+LONG_MIN/60+LONG_SEC/3600)][,':='(LONG_DEG=NULL,LONG_MIN=NULL,LONG_SEC=NULL,
LAT_DEG=NULL,LAT_MIN=NULL,LAT_SEC=NULL)]
# additional location file gives the additional locations that may not be provided by plotdata
additionalLocations <- read.csv("AdditionalLocations.csv",header=TRUE,stringsAsFactor=FALSE)
additionalLocations <- data.table(additionalLocations)[LATITUDE!=0,.(PROJ_CODE,
SAMPLE,PLOT,LATITUDE,LONGITUDE)]
additionalLocations$SAMPLE <- as.factor(additionalLocations$SAMPLE)
setnames(additionalLocations,"PROJ_CODE","PROJECT_CODE")
plotdata <- dplyr::left_join(plotdata,additionalLocations,by=c("PROJECT_CODE","SAMPLE","PLOT")) %>%
data.table
plotdata[(is.na(Latitude) | Latitude==0),':='(Latitude=LATITUDE,Longitude=LONGITUDE)]
plotdata_LatLocations <- plotdata[!is.na(Latitude) | Latitude!=0][,Longitude:=-abs(Longitude)]
plotdata_UTMLocations <- plotdata[which(!(plotdata$PLOT_CODE %in% plotdata_LatLocations$PLOT_CODE))]
plotdata_UTMLocations <- plotdata_UTMLocations[!is.na(ZONE) & !is.na(EASTING) & !is.na(NORTHING)]
# convert UTM locations to latitude
utm_longlat_data <- plotdata_UTMLocations[1,':='(Longitude=0,Latitude=0)][0,]
for (i in unique(plotdata_UTMLocations$ZONE)){
zonedata <- plotdata_UTMLocations[ZONE==i]
zoneutmcoor<-SpatialPoints(cbind(zonedata$EASTING,zonedata$NORTHING),
proj4string=CRS(paste("+proj=utm +zone=",i,sep="")))
zonelonglatcoor<-spTransform(zoneutmcoor,CRS("+proj=longlat"))
zonelonglatcoor <- setnames(data.table(attributes(zonelonglatcoor)$coords),
c("Long","Lat"))
zonedata[,':='(Longitude=zonelonglatcoor$Long,Latitude=zonelonglatcoor$Lat)]
utm_longlat_data <- rbindlist(list(utm_longlat_data,zonedata))
}
plotdata_withLocations <- data.table(rbind(plotdata_LatLocations,utm_longlat_data))[
,.(PROJECT_CODE,SAMPLE,PLOT,PLOT_CODE,Latitude,Longitude)]
# remove the plots that do not have measurement year
plotdata_withMeasureYear <- plotdata[Year!=1900][,.(PROJECT_CODE,SAMPLE,PLOT,
PLOT_CODE,Year,PLOT_TYPE,SIZE,fc_id)]
unique(plotdata_withMeasureYear$PLOT_TYPE)
#[1] "F" "P" "L" "T" "C"
# F is fixed radius plot
# P is prism or variable radius plot
# L is psp fixed radius
# T is TSP
# C is cummulative voloum # what is this????
nrow(plotdata_withMeasureYear[PLOT_TYPE=="C" | PLOT_TYPE=="t"]) # 25 PLOTS
nrow(plotdata_withMeasureYear[PLOT_TYPE=="F" | PLOT_TYPE=="L"]) # 6134 plots
nrow(plotdata_withMeasureYear[PLOT_TYPE=="P"]) # 16961 plots
treedata <- read.csv("TREE.csv",header=TRUE,stringsAsFactor=FALSE)
treedata <- data.table(treedata)
length(unique(treedata$PLOT_CODE))
# the link between treedata and plot data is PLOT_CODE
setkey(treedata,PLOT_CODE)
setkey(plotdata_withMeasureYear,PLOT_CODE)
treedata <- treedata[plotdata_withMeasureYear,nomatch=0]
# measurement year range
range(treedata$Year) # 1977 to 2015
length(unique(treedata$PLOT_CODE))
treedatasummary <- treedata[,.(NofTree=length(DBH),Year=mean(Year),
Plot_Type=PLOT_TYPE[1],Size=mean(SIZE,na.rm=TRUE),FC_ID=mean(fc_id)),
by=PLOT_CODE]
treedatasummary <- dplyr::left_join(treedatasummary,plotdata_withLocations,by="PLOT_CODE") %>%
data.table
# add stand age information from the geodatabase NT_FORCOV_ATT.gdb
# SAinfor.csv was attribute table output from the geodatabase
# the linkage between treedatasummary and SAinfor is FC_ID
# the origin column contains the year when the stands originate
SAinfor <- read.csv("SA_infor.csv",header=TRUE,stringsAsFactor=FALSE)
SAinfor <- data.table(SAinfor)[!is.na(ORIGIN) & ORIGIN!=0 & FC_ID!=0][,.(FC_ID,ORIGIN)]
setnames(SAinfor,"ORIGIN","OriginYear")
treedatasummary <- dplyr::left_join(treedatasummary,SAinfor,by="FC_ID") %>%
data.table
treedatasummary[!is.na(OriginYear),SA:=Year-OriginYear]
#
ls()
rm(list=ls())
# package requirements
library(data.table)
library(dplyr)
library(rgdal)
# these codes are for organize the sampling data for NWT
setwd("~/PSPs/NT/data")
plotdata <- read.csv("PLOT.csv",header=TRUE,stringsAsFactor=FALSE)
plotdata <- data.table(plotdata)
# check whether the one plcot has multiple records in plotdata
length(unique(plotdata$PLOT_CODE))==nrow(plotdata) # TRUE means each plot has a unique record
# gathering location information in plotdata
# the location information in this dataset can be found in three ways: 1 by Lat_DEC, Long_DEC
# 2. by LAT_DEG and so on
# 3. by UTM
setnames(plotdata,c("Lat_DEC","Long_dec"),c("Latitude","Longitude"))
plotdata[!is.na(LAT_DEG) & is.na(LAT_MIN),LAT_MIN:=0]
plotdata[!is.na(LAT_DEG) & is.na(LAT_SEC),LAT_SEC:=0]
plotdata[!is.na(LAT_DEG) & is.na(LONG_MIN),LONG_MIN:=0]
plotdata[!is.na(LAT_DEG) & is.na(LONG_SEC),LONG_SEC:=0]
plotdata[(is.na(Latitude) | Latitude==0) & (!is.na(LAT_DEG) & !is.na(LONG_DEG)),
':='(Latitude=LAT_DEG+LAT_MIN/60+LAT_SEC/3600,
Longitude=LONG_DEG+LONG_MIN/60+LONG_SEC/3600)][,':='(LONG_DEG=NULL,LONG_MIN=NULL,LONG_SEC=NULL,
LAT_DEG=NULL,LAT_MIN=NULL,LAT_SEC=NULL)]
# additional location file gives the additional locations that may not be provided by plotdata
additionalLocations <- read.csv("AdditionalLocations.csv",header=TRUE,stringsAsFactor=FALSE)
additionalLocations <- data.table(additionalLocations)[LATITUDE!=0,.(PROJ_CODE,
SAMPLE,PLOT,LATITUDE,LONGITUDE)]
additionalLocations$SAMPLE <- as.factor(additionalLocations$SAMPLE)
setnames(additionalLocations,"PROJ_CODE","PROJECT_CODE")
plotdata <- dplyr::left_join(plotdata,additionalLocations,by=c("PROJECT_CODE","SAMPLE","PLOT")) %>%
data.table
plotdata[(is.na(Latitude) | Latitude==0),':='(Latitude=LATITUDE,Longitude=LONGITUDE)]
plotdata_LatLocations <- plotdata[!is.na(Latitude) | Latitude!=0][,Longitude:=-abs(Longitude)]
plotdata_UTMLocations <- plotdata[which(!(plotdata$PLOT_CODE %in% plotdata_LatLocations$PLOT_CODE))]
plotdata_UTMLocations <- plotdata_UTMLocations[!is.na(ZONE) & !is.na(EASTING) & !is.na(NORTHING)]
# convert UTM locations to latitude
utm_longlat_data <- plotdata_UTMLocations[1,':='(Longitude=0,Latitude=0)][0,]
for (i in unique(plotdata_UTMLocations$ZONE)){
zonedata <- plotdata_UTMLocations[ZONE==i]
zoneutmcoor<-SpatialPoints(cbind(zonedata$EASTING,zonedata$NORTHING),
proj4string=CRS(paste("+proj=utm +zone=",i,sep="")))
zonelonglatcoor<-spTransform(zoneutmcoor,CRS("+proj=longlat"))
zonelonglatcoor <- setnames(data.table(attributes(zonelonglatcoor)$coords),
c("Long","Lat"))
zonedata[,':='(Longitude=zonelonglatcoor$Long,Latitude=zonelonglatcoor$Lat)]
utm_longlat_data <- rbindlist(list(utm_longlat_data,zonedata))
}
plotdata_withLocations <- data.table(rbind(plotdata_LatLocations,utm_longlat_data))[
,.(PROJECT_CODE,SAMPLE,PLOT,PLOT_CODE,Latitude,Longitude)]
# remove the plots that do not have measurement year
plotdata_withMeasureYear <- plotdata[Year!=1900][,.(PROJECT_CODE,SAMPLE,PLOT,
PLOT_CODE,Year,PLOT_TYPE,SIZE,fc_id)]
unique(plotdata_withMeasureYear$PLOT_TYPE)
#[1] "F" "P" "L" "T" "C"
# F is fixed radius plot
# P is prism or variable radius plot
# L is psp fixed radius
# T is TSP
# C is cummulative voloum # what is this????
nrow(plotdata_withMeasureYear[PLOT_TYPE=="C" | PLOT_TYPE=="t"]) # 25 PLOTS
nrow(plotdata_withMeasureYear[PLOT_TYPE=="F" | PLOT_TYPE=="L"]) # 6134 plots
nrow(plotdata_withMeasureYear[PLOT_TYPE=="P"]) # 16961 plots
treedata <- read.csv("TREE.csv",header=TRUE,stringsAsFactor=FALSE)
treedata <- data.table(treedata)
length(unique(treedata$PLOT_CODE))
# the link between treedata and plot data is PLOT_CODE
setkey(treedata,PLOT_CODE)
setkey(plotdata_withMeasureYear,PLOT_CODE)
treedata <- treedata[plotdata_withMeasureYear,nomatch=0]
# measurement year range
range(treedata$Year) # 1977 to 2015
length(unique(treedata$PLOT_CODE))
treedatasummary <- treedata[,.(NofTree=length(DBH),Year=mean(Year),
Plot_Type=PLOT_TYPE[1],Size=mean(SIZE,na.rm=TRUE),FC_ID=mean(fc_id)),
by=PLOT_CODE]
treedatasummary <- dplyr::left_join(treedatasummary,plotdata_withLocations,by="PLOT_CODE") %>%
data.table
# add stand age information from the geodatabase NT_FORCOV_ATT.gdb
# SAinfor.csv was attribute table output from the geodatabase
# the linkage between treedatasummary and SAinfor is FC_ID
# the origin column contains the year when the stands originate
SAinfor <- read.csv("SA_infor.csv",header=TRUE,stringsAsFactor=FALSE)
SAinfor <- data.table(SAinfor)[!is.na(ORIGIN) & ORIGIN!=0 & FC_ID!=0][,.(FC_ID,ORIGIN)]
setnames(SAinfor,"ORIGIN","OriginYear")
treedatasummary <- dplyr::left_join(treedatasummary,SAinfor,by="FC_ID") %>%
data.table
treedatasummary[!is.na(OriginYear),SA:=Year-OriginYear]
#
ls()
additionalLocations
plotdata
treedatasummary
plotdata_withLocations
treedatasummary
length(which(is.na(treedatasummary$SA)))
22815-15283
ls()
save.image("NWTTSP.RData")
rm(list=ls())
setwd("~/PSPs/NT/data/wesbogy dataset")
rm(list=ls())
setwd("~/PSPs/NT/data/wesbogy dataset")
wesbogyPlot <- read.csv("WESBOGY_PLOT.csv", header=T, stringsAsFactor = F) %>%
data.table
wesbogyTree <- read.csv("WESBOGY_TREE.csv", header=T, stringsAsFactor = F) %>%
data.table
ls()
save.image("NWT_WESBOGY.RData")
rm(list=ls())
setwd("~/PSPs/NT/SK/SKPSP")
setwd("~/PSPs/SK/SKPSP")
rm(list=ls())
setwd("~/PSPs/SK/SKPSP")
treedata <- read.csv("SKPSPtrees.csv",header=T, stringsAsFactor = F)
plotheader1 <- read.csv("age_samples.csv",header=T, stringsAsFactor = F)
plotheader2 <- read.csv("measurement_header.csv",header=T, stringsAsFactor = F)
plotheader3 <- read.csv("plot_header.csv",header=T, stringsAsFactor = F)
rm(list=ls())
setwd("~/PSPs/SK/SKPSP")
treedata <- read.csv("SKPSPtrees.csv",header=T, stringsAsFactor = F) %>%
data.table
plotheader1 <- read.csv("age_samples.csv",header=T, stringsAsFactor = F) %>%
data.table
plotheader2 <- read.csv("measurement_header.csv",header=T,
stringsAsFactor = F) %>%
data.table
plotheader3 <- read.csv("plot_header.csv",header=T, stringsAsFactor = F) %>%
data.table
ls()
names(plotheader1)
names(plotheader2)
names(plotheader3)
names(treedata)
save.image("SKPSP.RData")
rm(list=ls())
setwd("~/PSPs/SK/SKTSP")
PAtreedata <- read.csv("PA_Tree_Measurement.csv",header=T, stringsAsFactor = F) %>%
data.table
PAplotheader <- read.csv("PA_Plot_Locations_csrs98.csv",header=T, stringsAsFactor = F) %>%
data.table
PAsampletree <- read.csv("PA_Sample_Trees.csv",header=T, stringsAsFactor = F) %>%
data.table
PPtreedata <- read.csv("PP_Tree_Measurement.csv",header=T, stringsAsFactor = F) %>%
data.table
PPplotheader <- read.csv("PP_Plot_Locations_csrs98.csv",header=T, stringsAsFactor = F) %>%
data.table
PPsampletree <- read.csv("PP_Sample_Trees.csv",header=T, stringsAsFactor = F) %>%
data.table
PAtreedata
ls()
save.image("SKTSP_PAPP.RData")
rm(list=ls())
setwd("~/PSPs/SK/SKTSP/Mistic")
treedata <- read.csv("output.csv",header=T, stringsAsFactor = F) %>%
data.table
names(treedata)
head(treedata)
plotheader <- read.csv("SFVIPLOT.csv",header=T, stringsAsFactor = F) %>%
data.table
names(plotheader)
"AGE" %in% names(plotheader)
nrow(treedata)
rm(list=ls())
setwd("~/PSPs/SK/SKTSP/Mistic")
treedata <- read.csv("COMPILEDTREEDATA.csv",header=T, stringsAsFactor = F) %>%
data.table
plotheader <- read.csv("COMPILEDPLOTDATA.csv",header=T, stringsAsFactor = F) %>%
data.table
ls()
save.image("SK_TSP_Mistic.RData")
rm(list=ls())
setwd("~/PSPs/NRCAN/NFI_PSP")
rm(list=ls())
setwd("~/PSPs/NRCAN/NFI_PSP")
largeTreedata <- read.csv("all_gp_ltp_tree.csv",header=T, stringsAsFactor = F) %>%
data.table
largeTreeAgedata <- read.csv("all_gp_ltp_tree_age.csv",header=T, stringsAsFactor = F) %>%
data.table
largeTreePlotHeader <- read.csv("all_gp_ltp_header.csv",header=T, stringsAsFactor = F) %>%
data.table
plotOrigin <- read.csv("all_gp_origin.csv",header=T, stringsAsFactor = F) %>%
data.table
smallTreedata <- read.csv("all_gp_stp_tree.csv",header=T, stringsAsFactor = F) %>%
data.table
smallTreePlotHeader <- read.csv("all_gp_stp_header.csv",header=T, stringsAsFactor = F) %>%
data.table
ls()
save.image("NFI.RData")
setwd("C:/Users/yonluo/Documents/LandWeb/Data/SK")
setwd("C:/Users/yonluo/Documents/LandWeb/Data/SK")
setwd("~/LandWeb/Data/SK")
load("SKPSP.RData")
SADataRaw <- plotheader1
plotHeadRaw <- plotheader3
measureHeadRaw <- plotheader2
library(data.table)
SADataRawDomSA
SADataRaw <- SADataRaw[!is.na(TOTAL_AGE),]
SADataRawDomSA <- SADataRaw[CROWN_CLASS == 1,] # the stand age first determined by dominant trees
SADataRawDomSA
SADataRawDomSA[, NofTrees:=length(CROWN_CLASS), by  = PLOT_ID]
range(SADataRawDomSA$NofTrees)
unique(SADataRawDomSA$NofTrees)
SADataRawDomSA <- SADataRawDomSA[NofTrees != 1,]
unique(SADataRawDomSA$NofTrees)
SADataRawDomSA[, treeAgeDif:=max(treeAge)-min(treeAge), by = PLOT_ID]
SADataRaw <- plotheader1
SADataRaw <- SADataRaw[!is.na(TOTAL_AGE),]
SADataRaw[, baseYear := min(YEAR), by = PLOT_ID]
SADataRaw[, treeAge := TOTAL_AGE-(YEAR-baseYear)]
SADataRawDomSA <- SADataRaw[CROWN_CLASS == 1,] # the stand age first determined by dominant trees
SADataRawDomSA[, NofTrees:=length(CROWN_CLASS), by  = PLOT_ID]
range(SADataRawDomSA$NofTrees) # 1 2 3 4 5
unique(SADataRawDomSA$NofTrees)
SADataRawDomSA <- SADataRawDomSA[NofTrees != 1,]
SADataRawDomSA[, treeAgeDif:=max(treeAge)-min(treeAge), by = PLOT_ID]
range(SADataRawDomSA$treeAgeDif)
mean(SADataRawDomSA$treeAgeDif)
SADataRawDomSA[, SA:=as.integer(mean(treeAge)), by = PLOT_ID]
SADataRawDomSA
SADataRawCodomSA <- SADataRaw[CROWN_CLASS == 2,]
SADataRawCodomSA[!(PLOT_ID %in% unique(SADataRawDomSA$PLOT_ID)),]
SADataRawCodomSA <- SADataRawCodomSA[!(PLOT_ID %in% unique(SADataRawDomSA$PLOT_ID)),]
SADataRawCodomSA[, NofTrees:=length(CROWN_CLASS), by  = PLOT_ID]
unique(SADataRawCodomSA$NofTrees)
SADataRawCodomSA <- SADataRawCodomSA[NofTrees != 1,]
SADataRawCodomSA[, treeAgeDif:=max(treeAge)-min(treeAge), by = PLOT_ID]
range(SADataRawCodomSA$treeAgeDif)
mean(SADataRawCodomSA$treeAgeDif)
SADataRawCodomSA[treeAgeDif == 97,]
SADataRawCodomSA[treeAgeDif == 97,]$treeAge
which(SADataRawCodomSA == 97 & treeAge == 20)
which(SADataRawCodomSA$treeAgeDif == 97 & SADataRawCodomSA$treeAge == 20)
removerow <- which(SADataRawCodomSA$treeAgeDif == 97 & SADataRawCodomSA$treeAge == 20)
SADataRawCodomSA[-removerow,]
SADataRawCodomSA <- SADataRawCodomSA[-removerow,]
range(SADataRawCodomSA$treeAgeDif) # 0 97
SADataRawCodomSA[, treeAgeDif:=max(treeAge)-min(treeAge), by = PLOT_ID]
range(SADataRawCodomSA$treeAgeDif) #
mean(SADataRawCodomSA$treeAgeDif)
SADataRawCodomSA[treeAgeDif == 75,]$treeAge
removerow <- which(SADataRawCodomSA$treeAgeDif == 75 & SADataRawCodomSA$treeAge == 115)
SADataRawCodomSA <- SADataRawCodomSA[-removerow,]
SADataRawCodomSA[, treeAgeDif:=max(treeAge)-min(treeAge), by = PLOT_ID]
range(SADataRawCodomSA$treeAgeDif)
SADataRawCodomSA[treeAgeDif == 68,]$treeAge
removerow <- which(SADataRawCodomSA$treeAgeDif == 68 & SADataRawCodomSA$treeAge == 75)
SADataRawCodomSA <- SADataRawCodomSA[-removerow,]
SADataRawCodomSA[, treeAgeDif:=max(treeAge)-min(treeAge), by = PLOT_ID]
range(SADataRawCodomSA$treeAgeDif)
SADataRawCodomSA[, baseSA:=as.integer(mean(treeAge)), by = PLOT_ID]
SADataRawCodomSA
SADataRawDomSA
unique(SADataRawDomSA$SPECIES)
SADataRawDomSA[treeAgeDif==44,]
SADataRawCodomSA <- SADataRaw[CROWN_CLASS == 2,]
SADataRawCodomSA <- SADataRawCodomSA[!(PLOT_ID %in% unique(SADataRawDomSA$PLOT_ID)),]
SADataRawCodomSA[, NofTrees:=length(CROWN_CLASS), by  = PLOT_ID]
# unique(SADataRawCodomSA$NofTrees)
SADataRawCodomSA <- SADataRawCodomSA[NofTrees != 1,]
SADataRawCodomSA[, baseSA:=as.integer(mean(treeAge)), by = PLOT_ID]
SADataRawCodomSA
SADataRawDomSA
SADataRaw <- plotheader1
SADataRaw <- SADataRaw[!is.na(TOTAL_AGE),]
SADataRaw[, baseYear := min(YEAR), by = PLOT_ID]
SADataRaw[, treeAge := TOTAL_AGE-(YEAR-baseYear)]
SADataRawDomSA <- SADataRaw[CROWN_CLASS == 1,] # the stand age first determined by dominant trees
SADataRawDomSA[, NofTrees:=length(CROWN_CLASS), by  = PLOT_ID]
# unique(SADataRawDomSA$NofTrees) # 1 2 3 4 5
# stand age must determined by using at least 2 trees
SADataRawDomSA <- SADataRawDomSA[NofTrees != 1,]
# SADataRawDomSA[, treeAgeDif:=max(treeAge)-min(treeAge), by = PLOT_ID]
# range(SADataRawDomSA$treeAgeDif) # 0 44
# mean(SADataRawDomSA$treeAgeDif) # 7.03
SADataRawDomSA[, baseSA:=as.integer(mean(treeAge)), by = PLOT_ID]
SADataRawDomSA <- unique(SADataRawDomSA[,.(PLOT_ID, baseYear, baseSA)], by = "PLOT_ID")
# for the other plots determine SA using codominant trees
SADataRawCodomSA <- SADataRaw[CROWN_CLASS == 2,]
SADataRawCodomSA <- SADataRawCodomSA[!(PLOT_ID %in% unique(SADataRawDomSA$PLOT_ID)),]
SADataRawCodomSA[, NofTrees:=length(CROWN_CLASS), by  = PLOT_ID]
# unique(SADataRawCodomSA$NofTrees)
SADataRawCodomSA <- SADataRawCodomSA[NofTrees != 1,]
SADataRawCodomSA[, baseSA:=as.integer(mean(treeAge)), by = PLOT_ID]
SADataRawCodomSA <unique(SADataRawCodomSA[,.(PLOT_ID, baseYear, baseSA)], by = "PLOT_ID")
SADataRawCodomSA <- unique(SADataRawCodomSA[,.(PLOT_ID, baseYear, baseSA)], by = "PLOT_ID")
headData_SA <- rbind(SADataRawDomSA, SADataRawCodomSA)
headData_SA
length(unique(headData_SA$PLOT_ID))
plotHeadRaw <- plotheader3
plotHeadRaw
headData_loca <- plotHeadRaw[PLOT_ID %in% unique(headData_SA$PLOT_ID),]
headData_loca
headData_loca <- plotHeadRaw[PLOT_ID %in% unique(headData_SA$PLOT_ID),][
,.(PLOT_ID, Z13nad83_e, Z13nad83_n, Zone = 13)]
headData_loca
headData_SA
names(headData_loca)[2:3] <- c("Easting", "Northing")
headData_loca
headData_SALoca <- setkey(headData_SA, PLOT_ID)[setkey(headData_loca, PLOT_ID),
nomatch = 0]
headData_SALoca
measureHeadRaw
measureHeadRaw
headData_PS <- measureHeadRaw[PLOT_ID %in% unique(headData_SALoca$PLOT_ID),]
headData_PS
headData_PS <- measureHeadRaw[PLOT_ID %in% unique(headData_SALoca$PLOT_ID),][
,.(PLOT_ID, PLOT_SIZE)]
headData_PS
headData_PS[,pstimes:=length(unique(PLOT_SIZE)), by = PLOT_ID]
headData_PS
range(headData_PS$pstimes)
headData_PS[pstimes==2,]
headData_PS <- measureHeadRaw[PLOT_ID %in% unique(headData_SALoca$PLOT_ID),][
,.(PLOT_ID, PLOT_SIZE)][!is.na(PLOT_SIZE),]
headData_PS[,pstimes:=length(unique(PLOT_SIZE)), by = PLOT_ID]
range(headData_PS$pstimes) # 1 2
headData_PS[pstimes==2,]
headData_PS <- unique(headData_PS, PLOT_ID)
headData_PS <- unique(headData_PS, by = "PLOT_ID")
headData_PS
setnames(headData_PS, "PLOTSIZE", "Plotsize")
setnames(headData_PS, "PLOT_SIZE", "Plotsize")
headData_PS
key(headData_SALoca)
headData <- headData_SALoca[setkey(headData_PS, PLOT_ID), nomatch = 0]
headData
plotheader1
plotheader3
plotheader2
treeDataRaw <- treedata
treeDataRaw
treeDataRaw <- treedata
treeDataRaw <- treeDataRaw[PLOT_ID %in% headData$PLOT_ID,]
treeDataRaw
treeDataRaw <- treeDataRaw[PLOT_ID %in% headData$PLOT_ID,][
,.(PLOT_ID, TREE_NO, YEAR, SPECIES, DBH, HEIGHT, CONDITION_CODE1,
CONDITION_CODE2, CONDITION_CODE3, MORTALITY)]
treeDataRaw
plotheader2
treeDataRaw
unique(treeDataRaw$CONDITION_CODE1)
sort(unique(treeDataRaw$CONDITION_CODE1))
setwd("C:/Users/Yong Luo/Documents/PSPs/Data/Data/MB")
MBTSPDataRaw <- read.csv("MB_TSP_Highrock.csv",
header = TRUE,
stringsAsFactors = FALSE) %>%
data.table
library(dplyr)
library(data.table)
setwd("C:/Users/Yong Luo/Documents/PSPs/Data/Data/MB")
MBTSPDataRaw <- read.csv("MB_TSP_Highrock.csv",
header = TRUE,
stringsAsFactors = FALSE) %>%
data.table
MBTSPDataRaw <- MBTSPDataRaw[,Nofplot:=length(unique(PLOTNO)), by = TILE]
headData <- MBTSPDataRaw[!is.na(AGE_BH) & (CC == "D" | CC == "C"),]
headData <- headData[, SA:=as.integer(mean(AGE_BH))+8, by = TILE]
headData[, Plotsize:=0.02*Nofplot]
headData
length(!is.na(headData$EASTING_EST))
length(which(!is.na(headData$EASTING_EST)))
length(which(is.na(headData$EASTING_EST)))
names(headData)
headData <- headData[,.(TILE, YEAR, EASTING, NORTHING, EASTING_EST,
NORTHING_EST)]
headData
headData <- MBTSPDataRaw[!is.na(AGE_BH) & (CC == "D" | CC == "C"),]
headData <- headData[, SA:=as.integer(mean(AGE_BH))+8, by = TILE]
length(which(!is.na(headData$EASTING_EST)))
headData[, Plotsize:=0.02*Nofplot]
headData <- headData[,.(TILE, YEAR, EASTING, NORTHING, EASTING_EST,
NORTHING_EST, SA, Plotsize)]
headData
headData[is.na(EASTING), EASTING := EASTING_EST]
headData[is.na(EASTING), EASTING := EASTING_EST]
headData[is.na(EASTING), EASTING := EASTING_EST]
headData[is.na(NORTHING), NORTHING := NORTHING_EST]
headData <- headData[!is.na(EASTING) & is.na(NORTHING),]
headData
headData <- MBTSPDataRaw[!is.na(AGE_BH) & (CC == "D" | CC == "C"),]
headData <- headData[, SA:=as.integer(mean(AGE_BH))+8, by = TILE]
length(which(!is.na(headData$EASTING_EST)))
headData[, Plotsize:=0.02*Nofplot]
headData <- headData[,.(TILE, YEAR, EASTING, NORTHING, EASTING_EST,
NORTHING_EST, SA, Plotsize)]
headData <- headData[!is.na(EASTING) & !is.na(NORTHING),]
headData
headData <- unique(headData, by = "TILE")
headData
MBTSPDataRaw <- MBTSPDataRaw[,Nofplot:=length(unique(PLOTNO)), by = TILE]
headData <- MBTSPDataRaw[!is.na(AGE_BH) & (CC == "D" | CC == "C"),]
headData <- headData[, SA:=as.integer(mean(AGE_BH))+8, by = TILE]
length(which(!is.na(headData$EASTING_EST)))
headData[, Plotsize:=0.02*Nofplot]
headData <- headData[,.(TILE, YEAR, EASTING, NORTHING, SA, Plotsize)]
headData <- headData[!is.na(EASTING) & !is.na(NORTHING),]
headData <- unique(headData, by = "TILE")
headData
setnames(MBTSPDataRaw, c("YEAR", "EASTING", "NORTHING"),
C("Year", "Easting", "Northing"))
setnames(MBTSPDataRaw, c("YEAR", "EASTING", "NORTHING"),
c("Year", "Easting", "Northing"))
MBTSPDataRaw
setnames(headData, c("YEAR", "EASTING", "NORTHING"),
c("Year", "Easting", "Northing"))
headData
treeData <- MBTSPDataRaw[TILE %in% unqiue(headData$TILE),]
treeData <- MBTSPDataRaw[TILE %in% unique(headData$TILE),]
treeData
MBTSPDataRaw
treeData <- MBTSPDataRaw[TILE %in% unique(headData$TILE),][
,.(TILE, TREENO, SPP, DBH, HT, COND)]
treeData
unique(treeData$COND)
sort(unique(treeData$COND))
treeData[!is.na(COND) | COND != 10,]
source('~/GitHub/landwebNRV/landwebNRV/R/dataPurification_MBTSP.R')
rm(list=ls())
setwd("C:/Users/Yong Luo/Documents/PSPs/Data/Data/MB")
MBTSPDataRaw <- read.csv("MB_TSP_Highrock.csv",
header = TRUE,
stringsAsFactors = FALSE) %>%
data.table
source('~/GitHub/landwebNRV/landwebNRV/R/dataPurification_MBTSP.R')
dd <- dataPurification_MBTSP(MBTSPDataRaw)
dd
treeData <- treeData[!is.na(COND) | COND != 10,][,COND:=NULL]
rm(list=ls())
setwd("C:/Users/Yong Luo/Documents/PSPs/Data/Data/MB")
MBTSPDataRaw <- read.csv("MB_TSP_Highrock.csv",
header = TRUE,
stringsAsFactors = FALSE) %>%
data.table
source('~/GitHub/landwebNRV/landwebNRV/R/dataPurification_MBTSP.R')
dd <- dataPurification_MBTSP(MBTSPDataRaw)
dd
MBTSPDataRaw <- read.csv("MB_TSP_FML1.csv",
header = TRUE,
stringsAsFactors = FALSE) %>%
data.table
dd <- dataPurification_MBTSP(MBTSPDataRaw)
dd
