raster::writeRaster(speciesComMap,
file.path("~/LandWeb/initialCommunities.tif"),
overwrite=TRUE)
initialCommunities <- data.table(mapCode=sort(unique(getValues(speciesComMap))))
initialCommunities[,mapCodeStr:=as.character(mapCode)]
initialCommunities[, NofStr:=nchar(mapCodeStr)]
for(i in 1:8){
initialCommunities[NofStr==i, mapCodeFull:=paste(paste(rep("0",(9-i)),
collapse = ""),
mapCodeStr,
sep = "")]
}
initialCommunities[NofStr==9, mapCodeFull:=mapCodeStr]
output <- data.table(mapCode = numeric(), speciesPresence = character(),
species = character())
for(i in 1:nrow(initialCommunities)){
outputAdd <- data.table(mapCode = initialCommunities$mapCode[i],
speciesPresence = substring(initialCommunities$mapCodeFull[i],
seq(1, 9, 1), seq(1, 9, 1)),
species = c("Popu_Tre", "Pinu_Str", "Pinu_Con", "Pinu_Ban",
"Pice_Mar", "Pice_Gla", "Betu_Pap", "Abie_Las",
"Abie_Bal"))
output <- rbind(output, outputAdd)
}
initialCommunities <- output[speciesPresence!="0",]
initialCommunities[,newMapCode:=as.numeric(as.factor(mapCode))]
mapcodeconnection <- unique(initialCommunities[,.(mapCode, newMapCode)], by = "mapCode")
ncell(speciesComMap)
indexTable <- data.table(pixelIndex=1:ncell(speciesComMap),
mapCode=getValues(speciesComMap))
indexTable <- indexTable[!is.na(mapCode),]
indexTable <- setkey(indexTable, mapCode)[setkey(mapcodeconnection, mapCode),
nomatch = 0]
speciesComMap[indexTable$pixelIndex] <- indexTable$newMapCode
raster::writeRaster(speciesComMap,
file.path("~/LandWeb/initialCommunities.tif"),
overwrite=TRUE)
initialCommunities[, ':='(mapCode = newMapCode, newMapCode = NULL, speciesPresence = NULL)]
write.csv(initialCommunities, "initialCommunities.csv", row.names = FALSE)
initialCommunities
speciesComMap
library(data.table)
initialCommunities
speciesComMap
initialCommunities <- data.table(mapCode=sort(unique(getValues(speciesComMap))))
initialCommunities[,mapCodeStr:=as.character(mapCode)]
initialCommunities[, NofStr:=nchar(mapCodeStr)]
for(i in 1:8){
initialCommunities[NofStr==i, mapCodeFull:=paste(paste(rep("0",(9-i)),
collapse = ""),
mapCodeStr,
sep = "")]
}
initialCommunities
initialCommunities
initialCommunities <- data.table(mapCode=sort(unique(getValues(speciesComMap))))
initialCommunities
rm(list=ls())
speciesNames <- c("Abie_Bal", "Abie_Las", "Betu_Pap", "Pice_Gla", "Pice_Mar",
"Pinu_Ban", "Pinu_Con", "Pinu_Str", "Popu_Tre")
speciesComMap <- raster(file.path("~/LandWeb/speciesMap",
paste(speciesNames[1], ".tif", sep = "")))
speciesComMap <- as.logical(speciesComMap)
speciesComMap[Which(is.na(speciesComMap), cell = TRUE)] <- 0
speciesComMap
Which(is.na(speciesComMap), cell = TRUE)
speciesNames <- c("Abie_Bal", "Abie_Las", "Betu_Pap", "Pice_Gla", "Pice_Mar",
"Pinu_Ban", "Pinu_Con", "Pinu_Str", "Popu_Tre")
speciesComMap <- raster(file.path("~/LandWeb/speciesMap",
paste(speciesNames[1], ".tif", sep = "")))
speciesComMap <- as.logical(speciesComMap)
speciesComMap
unique(getValues(speciesComMap))
Which(is.na(speciesComMap), cell = TRUE)
?Which
Which(is.na(speciesComMap), cells = TRUE)
speciesComMap <- raster(file.path("~/LandWeb/speciesMap",
paste(speciesNames[1], ".tif", sep = "")))
speciesComMap <- as.logical(speciesComMap)
speciesComMap[Which(is.na(speciesComMap), cells = TRUE)] <- 0
speciesComMap <- raster(file.path("~/LandWeb/speciesMap",
paste(speciesNames[1], ".tif", sep = "")))
speciesComMap <- as.logical(speciesComMap)
speciesComMap <- raster(file.path("~/LandWeb/speciesMap",
paste(speciesNames[1], ".tif", sep = "")))
speciesComMap <- as.logical(speciesComMap)
Which(is.na(speciesComMap), cells = TRUE, na.rm = FALSE)
speciesComMap <- raster(file.path("~/LandWeb/speciesMap",
paste(speciesNames[1], ".tif", sep = "")))
speciesComMap
setwd("~/GitHub/landwebNRV")
rm(list=ls())
focalArea <- readRDS("focalArea.rds")
seralStageMap <- raster("seralStageMap.tif")
vegTypeMap <- raster("vegTypeMap.tif")
focalArea <- spTransform(focalArea, crs(seralStageMap))
extractTable <- data.table(seralStage = extract(seralStageMap, focalArea)[[1]],
vegType = extract(vegTypeMap, focalArea)[[1]])
seralStageArea <- extractTable[,.(NofPixel=length(vegType)), by = seralStage]
library(raster)
library(data.table)
?mask
?crop
library(sp)
rm(list=ls())
focalArea <- readRDS("focalArea.rds")
seralStageMap <- raster("seralStageMap.tif")
vegTypeMap <- raster("vegTypeMap.tif")
focalArea <- spTransform(focalArea, crs(seralStageMap))
extractTable <- data.table(seralStage = extract(seralStageMap, focalArea)[[1]],
vegType = extract(vegTypeMap, focalArea)[[1]])
extractTable
seralStageArea <- extractTable[,.(NofPixel=length(vegType)), by = seralStage]
seralStageArea
seralStageArea <- extractTable[,.(NofPixel=length(vegType)), by = seralStage][
!is.na(seralStage),]
seralStageArea
seralStageArea[, ':='(area_ha = NofPixel*(res(seralStageMap)[1]^2)/10000,
areaPercentage = NofPixel/sum(NofPixel))]
seralStageArea
vegTypeArea <- extractTable[,.(NofPixel=length(seralStage)), by = vegType][
!is.na(vegType),]
vegTypeArea[, ':='(area_ha = NofPixel*(res(vegTypeMap)[1]^2)/10000,
areaPercentage = NofPixel/sum(NofPixel))]
vegTypeArea
speciesLayers <- stack()
class(speciesLayers)
filePath <- "M:/data/kNN/Original"
speciesNames <- c("Abie_Bal", "Abie_Las", "Betu_Pap", "Pice_Gla", "Pice_Mar",
"Pinu_Ban", "Pinu_Con", "Pinu_Str", "Popu_Tre")
species <- speciesNames[1]
species
speciesLayer <- raster(file.path(filePath, paste("NFI_MODIS250m_kNN_Species_",
species,"_v0.tif")))
speciesLayer <- raster(file.path(filePath, paste("NFI_MODIS250m_kNN_Species_",
species,"_v0.tif",
sep = "")))
speciesLayer
speciesLayers <- stack(speciesLayers, speciesLayer)
speciesLayers
rm(list=ls())
filePath <- "M:/data/kNN/Original"
speciesNames <- c("Abie_Bal", "Abie_Las", "Betu_Pap", "Pice_Gla", "Pice_Mar",
"Pinu_Ban", "Pinu_Con", "Pinu_Str", "Popu_Tre")
speciesLayers <- stack()
for(species in speciesNames){
speciesLayer <- raster(file.path(filePath, paste("NFI_MODIS250m_kNN_Species_",
species,"_v0.tif",
sep = "")))
speciesLayers <- stack(speciesLayers, speciesLayer)
}
names(speciesLayers) <- speciesNames
speciesLayers
writeRDS(speciesLayers, "speciesLayersStack.rds")
?readRDS
saveRDS(speciesLayers, "speciesLayersStack.rds")
rm(list=ls())
dir()
ls()
speciesLayers <- readRDS("speciesLayersStack.rds")
speciesLayers
abiebal <- speciesLayers$Abie_Bal
abiebal
library(SpaDES)
Plot()
Plot(abiebal)
clearPlot()
dev(4)
Plot(abiebal)
coord <- clickCoordinates(10)
coord
dd <- Polygon(coord$coords)
dd
dd <- list(Polygon(coord$coords))
dd
dd <- Polygons(list(Polygon(coord$coords)))
dd <- Polygons(list(Polygon(coord$coords)), ID = 1)
dd
dd <- SpatialPolygons(list(Polygons(list(Polygon(coord$coords)), ID = 1)))
dd
dd <- SpatialPolygons(list(Polygons(list(Polygon(coord$coords)), ID = 1)), proj4string = crs(abiebal))
dd
saveRDS(dd, "randomStudyArea.rds")
rm(list=ls())
dir(,pattern=".rds")
ls()
speciesLayers <- readRDS("speciesLayersStack.rds")
studyArea <- readRDS("randomStudyArea.rds")
speciesNames <- c("Abie_Bal", "Abie_Las", "Betu_Pap", "Pice_Gla", "Pice_Mar",
"Pinu_Ban", "Pinu_Con", "Pinu_Str", "Popu_Tre")
map1 <- speciesLayers[speciesLayers=="Abie_Bal"]
map1 <- speciesLayers$Abie_Bal
map1
map1 <- speciesLayers[names=="Abie_Bal"]
map1 <- speciesLayers[name=="Abie_Bal"]
map1 <- subset(speciesLayers, "Abie_Bal")
map1
species <- speciesNames[1]
species
map1 <- subset(speciesLayers, species)
studyArea <- spTransform(studyArea, crs(speciesLayers))
crs(speciesLayers)
?crop
dd <- crop(speciesLayers, studyArea)
dd
dev(4)
clearPlot()
Plot(dd[[1]])
ff <- mask(dd, studyArea)
Plot(ff[[1]])
ff
speciesNames <- c("Abie_Bal", "Abie_Las")
specieslayer <- subset(speciesLayers, speciesNames)
specieslayer
specieslayerBySpecies <- subset(speciesLayers, speciesNames)
specieslayerBySpeciesInStudyArea <- crop(specieslayerBySpecies,
studyArea)
specieslayerBySpeciesInStudyArea <- mask(specieslayerBySpeciesInStudyArea,
studyArea)
specieslayerBySpeciesInStudyArea
speciesComMap <- subset(specieslayerBySpeciesInStudyArea, speciesNames[1])
speciesComMap
speciesComMap <- as.logical(speciesComMap)
speciesComMap[Which(is.na(speciesComMap), cells = TRUE, na.rm = FALSE)] <- 0
k <- 1
for(species in speciesNames[2:length(speciesNames)]){
speciesMap <- subset(specieslayerBySpeciesInStudyArea, species)
speciesMap <- as.logical(speciesMap)
speciesMap[Which(is.na(speciesMap), cells = TRUE, na.rm = FALSE)] <- 0
speciesComMap <- speciesMap*(10^k)+speciesComMap
k <- k+1
}
speciesComMap
speciesComMap[Which(speciesComMap==0, cells = TRUE, na.rm = FALSE)] <- NA
speciesComMap
initialCommunities <- data.table(mapcode=sort(unique(getValues(speciesComMap))))
initialCommunities[,mapCodeStr:=as.character(mapCode)]
initialCommunities[,mapCodeStr:=as.character(mapcode)]
initialCommunities
initialCommunities[, NofStr:=nchar(mapCodeStr)]
for(i in 1:(length(speciesNames)-1)){
initialCommunities[NofStr==i, mapCodeFull:=paste(paste(rep("0",(length(speciesNames)-i)),
collapse = ""),
mapCodeStr,
sep = "")]
}
initialCommunities[NofStr==length(speciesNames), mapCodeFull:=mapCodeStr]
initialCommunities
output <- data.table(mapcode = numeric(), speciesPresence = character(),
species = character())
for(i in 1:nrow(initialCommunities)){
outputAdd <- data.table(mapcode = initialCommunities$mapcode[i],
speciesPresence = substring(initialCommunities$mapCodeFull[i],
seq(1, length(speciesNames), 1),
seq(1, length(speciesNames), 1)),
species = speciesNames[length(speciesNames):1])
output <- rbind(output, outputAdd)
}
output
initialCommunities <- output[speciesPresence!="0",]
initialCommunities
initialCommunities[,newMapCode:=as.numeric(as.factor(mapCode))]
initialCommunities[,newMapCode:=as.numeric(as.factor(mapcode))]
initialCommunities
mapcodeconnection <- unique(initialCommunities[,.(mapcode, newMapcode)], by = "mapcode")
initialCommunities
mapcodeconnection <- unique(initialCommunities[,.(mapcode, newMapCode)], by = "mapcode")
indexTable <- data.table(pixelIndex=1:ncell(speciesComMap),
mapcode=getValues(speciesComMap))
indexTable <- indexTable[!is.na(mapcode),]
indexTable
indexTable <- setkey(indexTable, mapcode)[setkey(mapcodeconnection, mapcode),
nomatch = 0]
speciesComMap[indexTable$pixelIndex] <- indexTable$newMapCode
speciesComMap
initialCommunities
initialCommunities[, ':='(mapcode = newMapCode, newMapCode = NULL, speciesPresence = NULL)]
initialCommunities
source('~/GitHub/landwebNRV/landwebNRV/R/initialCommunityMapkNN-MODIS.R')
rm(list=ls())
speciesLayers <- readRDS("speciesLayersStack.rds")
studyArea <- readRDS("randomStudyArea.rds")
speciesNames <- c("Abie_Bal", "Abie_Las", "Betu_Pap", "Pice_Gla", "Pice_Mar",
"Pinu_Ban", "Pinu_Con", "Pinu_Str", "Popu_Tre")
dd <- initialCommunityMapkNN-MODIS(speciesLayers, speciesNames, studyArea)
source('~/GitHub/landwebNRV/landwebNRV/R/initialCommunityMapkNN-MODIS.R')
dd <- initialCommunityMapkNN(speciesLayers, speciesNames, studyArea)
source('~/GitHub/landwebNRV/landwebNRV/R/initialCommunityMapkNN-MODIS.R')
rm(list=ls())
speciesLayers <- readRDS("speciesLayersStack.rds")
studyArea <- readRDS("randomStudyArea.rds")
speciesNames <- c("Abie_Bal", "Abie_Las")
source('~/GitHub/landwebNRV/landwebNRV/R/initialCommunityMapkNN-MODIS.R')
dd <- initialCommunityMapkNN(speciesLayers, speciesNames, studyArea)
dd
dd <- initialCommunityMapkNN(speciesLayers, studyArea)
speciesLayers
studyArea
rm(list=ls())
speciesLayers <- readRDS("speciesLayersStack.rds")
studyArea <- readRDS("randomStudyArea.rds")
speciesNames <- c("Abie_Bal", "Abie_Las")
source('~/GitHub/landwebNRV/landwebNRV/R/initialCommunityMapkNN-MODIS.R')
dd <- initialCommunityMapkNN(speciesLayers, studyArea)
dd <- initialCommunityMapkNN(speciesLayers = speciesLayers, studyArea = studyArea)
dd
rm(list=ls())
speciesLayers <- readRDS("speciesLayersStack.rds")
studyArea <- readRDS("randomStudyArea.rds")
dd <- initialCommunityMapkNN(speciesLayers = speciesLayers, studyArea = studyArea)
source('~/.active-rstudio-document')
rm(list=ls())
speciesLayers <- readRDS("speciesLayersStack.rds")
studyArea <- readRDS("randomStudyArea.rds")
source('~/GitHub/landwebNRV/landwebNRV/R/initialCommunityMapkNN-MODIS.R')
dd <- initialCommunityMapkNN(speciesLayers = speciesLayers, studyArea = studyArea)
dd
ls()
speciesLayers
studyArea
source('~/GitHub/landwebNRV/landwebNRV/R/initialCommunityMapkNN-MODIS.R')
dd <- initialCommunityMapkNN(speciesLayers = speciesLayers, studyArea = studyArea)
dd
?subset
?crop
?Which
ecoregionMapAll <- shapefile("M:/data/Ecozones/ecozones.shp")
ecoregionMapAll
ecoregionMapAll@data
dd
writeRaster(dd$initialCommunitiesMap, "initialMap.tif")
studyAreaRaster <- raster("initialMap.tif")
studyAreaRaster
ecoregionMapAll@data
unique(ecoregionMapAll@data$ZONE_NAME)
dput(unique(ecoregionMapAll@data$ZONE_NAME))
ecoregionActiveStatus <- data.table(active = "yes"
ecoregion = c("Taiga Cordillera", "Taiga Plain", "Taiga Shield",
"Boreal Cordillera",
"Boreal PLain", "Boreal Shield", "Hudson Plain",
"Montane Cordillera",  "MixedWood Plain"))
ecoregionActiveStatus <- data.table(active = "yes",
ecoregion = c("Taiga Cordillera", "Taiga Plain", "Taiga Shield",
"Boreal Cordillera",
"Boreal PLain", "Boreal Shield", "Hudson Plain",
"Montane Cordillera",  "MixedWood Plain"))
ecoregionActiveStatus
?intersect
rm(list = ls())
studyAreaRaster <- raster("initialMap.tif")
ecoregionMapFull <- shapefile("M:/data/Ecozones/ecozones.shp")
ecoregionName <- "ZONE_NAME"
ecoregionActiveStatus <- data.table(active = "yes",
ecoregion = c("Taiga Cordillera", "Taiga Plain", "Taiga Shield",
"Boreal Cordillera",
"Boreal PLain", "Boreal Shield", "Hudson Plain",
"Montane Cordillera",  "MixedWood Plain"))
studyArea <- readRDS("randomStudyArea.rds")
ecoregionMap_SA <- intersect(ecoregionMapFull, studyArea)
ecoregionMapFull <- spTransform(ecoregionMapFull, crs(studyAreaRaster))
studyArea <- spTransform(studyArea, crs(studyAreaRaster))
ecoregionMap_SA <- intersect(ecoregionMapFull, studyArea)
ecoregionMap_SA
dev(4)
clearPlot()
Plot(ecoregionMap_SA)
ecoregionMapInStudy <- intersect(ecoregionMapFull, studyArea)
ecoregionMapInStudy@data[,ecoregionName]
ecoregions <- ecoregionMapInStudy@data[,ecoregionName]
ecoregions
dd <- subset(ecoregionMapInStudy,"Boreal PLain")
ecoregionMapInStudy[ZONE_NAME=="Boreal PLain"]
ecoregionMapInStudy[ecoregionMapInStudy@ZONE_NAME=="Boreal PLain"]
ecoregionMapInStudy[ecoregionMapInStudy@ZONE_NAME=="Boreal PLain",]
ecoregionMapInStudy[ecoregionMapInStudy@data$ZONE_NAME=="Boreal PLain",]
ecoregionMapInStudy@data$ZONE_NAME=="Boreal PLain"
ecoregion <- "Boreal PLain"
ecoregionName
ecoregionMapInStudy@data[,ecoregionName]==ecoregion
sinleecoMap <- ecoregionMapInStudy[ecoregionMapInStudy@data[,ecoregionName]==ecoregion,]
sinleecoMap
mapcode <- 1
setValues(studyAreaRaster, mapcode)
studyAreaRaster <- setValues(studyAreaRaster, mapcode)
studyAreaRaster
rm(list = ls())
studyAreaRaster <- raster("initialMap.tif")
ecoregionMapFull <- shapefile("M:/data/Ecozones/ecozones.shp")
ecoregionName <- "ZONE_NAME"
ecoregionActiveStatus <- data.table(active = "yes",
ecoregion = c("Taiga Cordillera", "Taiga Plain", "Taiga Shield",
"Boreal Cordillera",
"Boreal PLain", "Boreal Shield", "Hudson Plain",
"Montane Cordillera",  "MixedWood Plain"))
studyArea <- readRDS("randomStudyArea.rds")
# change the coordinate reference for all spatialpolygons
ecoregionMapFull <- spTransform(ecoregionMapFull, crs(studyAreaRaster))
studyArea <- spTransform(studyArea, crs(studyAreaRaster))
ecoregionMapInStudy <- intersect(ecoregionMapFull, studyArea)
ecoregions <- ecoregionMapInStudy@data[,ecoregionName]
ecoregionTable <- data.table(mapcode = numeric(),
ecoregion = character())
mapcode <- 1
for(ecoregion in ecoregions){
ecoregionTable <- rbind(ecoregionTable,
data.table(mapcode = mapcode,
ecoregion = ecoregion))
singleecoMapPoly <- ecoregionMapInStudy[ecoregionMapInStudy@data[,ecoregionName]==ecoregion,]
studyAreaRaster <- setValues(studyAreaRaster, mapcode)
singleecoMapRaster <- crop(studyAreaRaster, singleecoMapPoly)
singleecoMapRaster <- mask(singleecoMapRaster, singleecoMapPoly)
if(mapcode == 1){
ecoregionMap <- singleecoMapRaster
} else {
ecoregionMap <- merge(ecoregionMap, singleecoMapRaster)
}
mapcode <- mapcode + 1
}
ecoregionMap
Plot(ecoregionMap)
clearPlot()
Plot(ecoregionMap, studyArea)
ecoregionTable
ecoregionActiveStatus
ecoregionTable1 <- dplyr::left_join(ecoregionTable,
ecoregionActiveStatus,
by = "ecoregion")
ecoregionTable1
ecoregionTable1 <- dplyr::left_join(ecoregionTable,
ecoregionActiveStatus,
by = "ecoregion") %>%
data.table
library(dplyr)
ecoregionTable1 <- dplyr::left_join(ecoregionTable,
ecoregionActiveStatus,
by = "ecoregion") %>%
data.table
ecoregionTable1
ecoregionTable <- dplyr::left_join(ecoregionTable,
ecoregionActiveStatus,
by = "ecoregion") %>%
data.table
ecoregionTable
ecoregionTable <- ecoregionTable[,.(active, mapcode, ecoregion)]
ecoregionTable
rm(list = ls())
studyAreaRaster <- raster("initialMap.tif")
ecoregionMapFull <- shapefile("M:/data/Ecozones/ecozones.shp")
ecoregionName <- "ZONE_NAME"
ecoregionActiveStatus <- data.table(active = "yes",
ecoregion = c("Taiga Cordillera", "Taiga Plain", "Taiga Shield",
"Boreal Cordillera",
"Boreal PLain", "Boreal Shield", "Hudson Plain",
"Montane Cordillera",  "MixedWood Plain"))
studyArea <- readRDS("randomStudyArea.rds")
source('~/GitHub/landwebNRV/landwebNRV/R/ecoregionMapProducer.R')
ecoregionMap <- ecoregionMapProducer(studyAreaRaster,
ecoregionMapFull,
ecoregionName,
ecoregionActiveStatus,
studyArea)
studyAreaRaster
ecoregionName
class(ecoregionName)
ecoregionActiveStatus
studyArea
source('~/GitHub/landwebNRV/landwebNRV/R/ecoregionMapProducer.R')
ecoregionMap <- ecoregionMapProducer(studyAreaRaster,
ecoregionMapFull,
ecoregionName,
ecoregionActiveStatus,
studyArea)
source('~/GitHub/landwebNRV/landwebNRV/R/ecoregionMapProducer.R')
ecoregionMap <- ecoregionMapProducer(studyAreaRaster,
ecoregionMapFull,
ecoregionName,
ecoregionActiveStatus,
studyArea)
studyArea
ecoregionMapFull
ecoregionMapInStudy <- intersect(ecoregionMapFull, studyArea)
ecoregionMapFull
rm(list = ls())
a <- raster("initialMap.tif")
b <- shapefile("M:/data/Ecozones/ecozones.shp")
c <- "ZONE_NAME"
d <- data.table(active = "yes",
ecoregion = c("Taiga Cordillera", "Taiga Plain", "Taiga Shield",
"Boreal Cordillera",
"Boreal PLain", "Boreal Shield", "Hudson Plain",
"Montane Cordillera",  "MixedWood Plain"))
e <- readRDS("randomStudyArea.rds")
ecoregionMap <- ecoregionMapProducer(studyAreaRaster = a,
ecoregionMapFull = b,
ecoregionName = c,
ecoregionActiveStatus = d,
studyArea = e)
source('~/GitHub/landwebNRV/landwebNRV/R/ecoregionMapProducer.R')
ecoregionMap <- ecoregionMapProducer(studyAreaRaster = a,
ecoregionMapFull = b,
ecoregionName = c,
ecoregionActiveStatus = d,
studyArea = e)
ecoregionMapFull
studyArea
ecoregionMapInStudy <- intersect(ecoregionMapFull, studyArea)
?intersect
ecoregionMap <- ecoregionMapProducer(studyAreaRaster = a,
ecoregionMapFull = b,
ecoregionName = c,
ecoregionActiveStatus = d,
studyArea = e)
