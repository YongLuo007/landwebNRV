pixelGroup = 1:5))
cohortData[,':='(B = seq(700, by = 50, length = 15),
aNPPAct = seq(100, by = 20, length = 15),
mortality = seq(200, by = 20, length = 15))]
cohortData[pixelGroup == 1 | pixelGroup == 2, ecoregionGroup := 2]
cohortData[pixelGroup == 3 | pixelGroup == 4 | pixelGroup == 5, ecoregionGroup := 1]
cohortData <- cohortData[,.(pixelGroup, ecoregionGroup, speciesCode, age = 50,
B, mortality, aNPPAct)]
pixelGroupMap <- raster(xmn=50,xmx=50+5*100,
ymn=50,ymx=50+5*100,
res=c(100,100), val=c(rep(5, 5), rep(4, 5), rep(3, 5),
rep(2, 3), rep(-1, 2), rep(1, 3),
rep(-1, 2)))
species <- data.table(species = c("species1", "species2", "species3"),
speciesCode = 1:3)
ecoregionMap <- setValues(pixelGroupMap, 0)
ecoregionMap[c(1:15)] <- 1
ecoregionMap[c(16:18, 21:23)] <- 2
ecoregionMap[c(19:20, 24:25)] <- 3
activePixelIndex <- c(1:18, 21:23)
reproductionData <- data.table(pixelGroup = getValues(pixelGroupMap)[c(1, 3, 5, 7, 9, 16, 22)],
ecoregionGroup = getValues(ecoregionMap)[c(1, 3, 5, 7, 9, 16, 22)],
speciesCode = c(1, 2, 3, 1, 2, 3, 1),
age = 1,
B = c(100, 300, 500, 700, 900, 150, 220),
mortality = 0, aNPPAct = 0)
cohortData <- rbind(cohortData, reproductionData)
simulationOutput <- data.table(Ecoregion = numeric(), NofCell = numeric(), Year = numeric(), Biomass = numeric(),
ANPP = numeric(), Mortality = numeric(), Regeneration = numeric())
simulationOutput_byspecies <- data.table(Ecoregion = numeric(), Species = character(), Year = numeric(),
Biomass = numeric(), ANPP = numeric(), Mortality = numeric())
cellSize <- 100
activeEcoregionLength <- data.table(Ecoregion = getValues(ecoregionMap), pixelIndex = 1:ncell(ecoregionMap))[
,.(NofCell = length(pixelIndex)), by = Ecoregion]
objects <- list("cohortData" = cohortData,
"pixelGroupMap" = pixelGroupMap,
"simulationOutput" = simulationOutput,
"cellSize" = cellSize,
"activeEcoregionLength" = activeEcoregionLength)
mySim <- simInit(times=list(start=0, end=2),
params=parameters,
modules=module,
objects=objects,
paths=path)
simOutput <- mySim$LBMRSummaryBGM(mySim)
summarytable_sub
module <- list("LBMR")
path <- list(modulePath="~/GitHub/nrv-succession/code blitz succession/Module_LBMR",
outputPath="~/output")
parameters <- list(.progress=list(type="graphical", interval=1),
.globals=list(verbose=FALSE),
LBMR=list( .saveInitialTime=NA))
cohortData <- data.table(expand.grid(speciesCode = 1:3,
pixelGroup = 1:5))
cohortData[,':='(B = seq(700, by = 50, length = 15),
aNPPAct = seq(100, by = 20, length = 15),
mortality = seq(200, by = 20, length = 15))]
cohortData[pixelGroup == 1 | pixelGroup == 2, ecoregionGroup := 2]
cohortData[pixelGroup == 3 | pixelGroup == 4 | pixelGroup == 5, ecoregionGroup := 1]
cohortData <- cohortData[,.(pixelGroup, ecoregionGroup, speciesCode, age = 50,
B, mortality, aNPPAct)]
pixelGroupMap <- raster(xmn=50,xmx=50+5*100,
ymn=50,ymx=50+5*100,
res=c(100,100), val=c(rep(5, 5), rep(4, 5), rep(3, 5),
rep(2, 3), rep(-1, 2), rep(1, 3),
rep(-1, 2)))
species <- data.table(species = c("species1", "species2", "species3"),
speciesCode = 1:3)
ecoregionMap <- setValues(pixelGroupMap, 0)
ecoregionMap[c(1:15)] <- 1
ecoregionMap[c(16:18, 21:23)] <- 2
ecoregionMap[c(19:20, 24:25)] <- 3
activePixelIndex <- c(1:18, 21:23)
reproductionData <- data.table(pixelGroup = getValues(pixelGroupMap)[c(1, 3, 5, 7, 9, 16, 22)],
ecoregionGroup = getValues(ecoregionMap)[c(1, 3, 5, 7, 9, 16, 22)],
speciesCode = c(1, 2, 3, 1, 2, 3, 1),
age = 1,
B = c(100, 300, 500, 700, 900, 150, 220),
mortality = 0, aNPPAct = 0)
cohortData <- rbind(cohortData, reproductionData)
simulationOutput <- data.table(Ecoregion = numeric(), NofCell = numeric(), Year = numeric(), Biomass = numeric(),
ANPP = numeric(), Mortality = numeric(), Regeneration = numeric())
simulationOutput_byspecies <- data.table(Ecoregion = numeric(), Species = character(), Year = numeric(),
Biomass = numeric(), ANPP = numeric(), Mortality = numeric())
cellSize <- 100
activeEcoregionLength <- data.table(Ecoregion = getValues(ecoregionMap), pixelIndex = 1:ncell(ecoregionMap))[
,.(NofCell = length(pixelIndex)), by = Ecoregion]
objects <- list("cohortData" = cohortData,
"pixelGroupMap" = pixelGroupMap,
"simulationOutput" = simulationOutput,
"cellSize" = cellSize,
"activeEcoregionLength" = activeEcoregionLength)
mySim <- simInit(times=list(start=0, end=2),
params=parameters,
modules=module,
objects=objects,
paths=path)
rm(list=ls())
library(raster)
library(data.table)
module <- list("LBMR")
path <- list(modulePath="~/GitHub/nrv-succession/code blitz succession/Module_LBMR",
outputPath="~/output")
parameters <- list(.progress=list(type="graphical", interval=1),
.globals=list(verbose=FALSE),
LBMR=list( .saveInitialTime=NA))
cohortData <- data.table(expand.grid(speciesCode = 1:3,
pixelGroup = 1:5))
cohortData[,':='(B = seq(700, by = 50, length = 15),
aNPPAct = seq(100, by = 20, length = 15),
mortality = seq(200, by = 20, length = 15))]
cohortData[pixelGroup == 1 | pixelGroup == 2, ecoregionGroup := 2]
cohortData[pixelGroup == 3 | pixelGroup == 4 | pixelGroup == 5, ecoregionGroup := 1]
cohortData <- cohortData[,.(pixelGroup, ecoregionGroup, speciesCode, age = 50,
B, mortality, aNPPAct)]
pixelGroupMap <- raster(xmn=50,xmx=50+5*100,
ymn=50,ymx=50+5*100,
res=c(100,100), val=c(rep(5, 5), rep(4, 5), rep(3, 5),
rep(2, 3), rep(-1, 2), rep(1, 3),
rep(-1, 2)))
species <- data.table(species = c("species1", "species2", "species3"),
speciesCode = 1:3)
ecoregionMap <- setValues(pixelGroupMap, 0)
ecoregionMap[c(1:15)] <- 1
ecoregionMap[c(16:18, 21:23)] <- 2
ecoregionMap[c(19:20, 24:25)] <- 3
activePixelIndex <- c(1:18, 21:23)
reproductionData <- data.table(pixelGroup = getValues(pixelGroupMap)[c(1, 3, 5, 7, 9, 16, 22)],
ecoregionGroup = getValues(ecoregionMap)[c(1, 3, 5, 7, 9, 16, 22)],
speciesCode = c(1, 2, 3, 1, 2, 3, 1),
age = 1,
B = c(100, 300, 500, 700, 900, 150, 220),
mortality = 0, aNPPAct = 0)
cohortData <- rbind(cohortData, reproductionData)
simulationOutput <- data.table(Ecoregion = numeric(), NofCell = numeric(), Year = numeric(), Biomass = numeric(),
ANPP = numeric(), Mortality = numeric(), Regeneration = numeric())
simulationOutput_byspecies <- data.table(Ecoregion = numeric(), Species = character(), Year = numeric(),
Biomass = numeric(), ANPP = numeric(), Mortality = numeric())
cellSize <- 100
activeEcoregionLength <- data.table(Ecoregion = getValues(ecoregionMap), pixelIndex = 1:ncell(ecoregionMap))[
,.(NofCell = length(pixelIndex)), by = Ecoregion]
objects <- list("cohortData" = cohortData,
"pixelGroupMap" = pixelGroupMap,
"ecoregionMap" = ecoregionMap,
"simulationOutput" = simulationOutput,
"cellSize" = cellSize,
"activeEcoregionLength" = activeEcoregionLength)
mySim <- simInit(times=list(start=0, end=2),
params=parameters,
modules=module,
objects=objects,
paths=path)
simOutput <- mySim$LBMRSummaryBGM(mySim)
ecoPixelgroup
subCohortData
tempOutput
tempOutput_All
tempOutput_All
sim$simulationOutput
expect_is(simOutput$biomassMap, "RasterLayer")
expect_equal(getValues(simOutput$biomassMap),
c(rep(4050, 5), rep(3600, 5), rep(3150, 5),
rep(2700, 3), NA, NA, rep(2250, 3), NA, NA))
expect_is(simOutput$ANPPMap, "RasterLayer")
expect_equal(getValues(simOutput$ANPPMap),
c(rep(1080, 5), rep(900, 5), rep(720, 5),
rep(540, 3), NA, NA, rep(360, 3), NA, NA))
expect_is(simOutput$mortalityMap, "RasterLayer")
expect_equal(getValues(simOutput$mortalityMap),
c(rep(1380, 5), rep(1200, 5), rep(1020, 5),
rep(840, 3), NA, NA, rep(660, 3), NA, NA))
expect_is(simOutput$simulationOutput, "data.table")
expect_equal(simOutput$simulationOutput,
data.table(Ecoregion = c(1, 2),
NofCell = c(15, 6),
Year = c(0, 0),
Biomass = c(3600, 2475),
ANPP = c(900, 450),
Mortality = c(1200, 750),
Regeneration = c(167, 62)))
simOutput$simulationOutput
getValues(simOutput$biomassMap)
reproductionData
expect_equal(getValues(simOutput$biomassMap),
c(rep(4950, 5), rep(5200, 5), rep(3150, 5),
rep(2850, 3), NA, NA, rep(2470, 3), NA, NA))
simOutput$simulationOutput
expect_equal(simOutput$simulationOutput,
data.table(Ecoregion = c(1, 2),
NofCell = c(15, 6),
Year = c(0, 0),
Biomass = c(4433, 2660),
ANPP = c(900, 450),
Mortality = c(1200, 750),
Regeneration = c(1967, 185)))
rm(list=ls())
module <- list("LBMR")
path <- list(modulePath="~/GitHub/nrv-succession/code blitz succession/Module_LBMR",
outputPath="~/output")
parameters <- list(.progress=list(type="graphical", interval=1),
.globals=list(verbose=FALSE),
LBMR=list( .saveInitialTime=NA))
# 1. testing how the species seeds spread into the neighbor empty cells
# the cohort data is set to not allow on site regeneration
ecoregionMap <- raster(xmn=50,xmx=50+99*100,
ymn=50,ymx=50+99*100,
res=c(100,100), val=1)
pixelGroupMap <- setValues(ecoregionMap,2)
c <- expand.grid(data.frame(a=seq(5,99,by=9),b=seq(5,99,by=9)))
pixelindex <- (c$a-1)*99+c$b #121
pixelGroupMap[pixelindex] <- 1
minRelativeB <- data.table(ecoregion = "eco1", X1 = 0.15,
X2 = 0.25, X3 = 0.5, X4 = 0.8,
X5 = 0.95, ecoregionGroup = 1)
sufficientLight <- read.csv("~/GitHub/nrv-succession/code blitz succession/modeltesting-data/sufficientLight.csv",
header=T,stringsAsFactor=FALSE)
lastFireYear <- "noFire"
activePixelIndex <- 1:9801
lastReg <- 0
successionTimestep <- 1
calibrate <- TRUE
regenerationOutput <- data.table(seedingAlgorithm=character(),species=character(),
Year=numeric(),numberOfReg=numeric())
species <- read.csv("~/GitHub/nrv-succession/code blitz succession/modeltesting-data/species.csv",
header=T,stringsAsFactor=FALSE)
species <- data.table(species)[,speciesCode:=1:16]
speciesEcoregion <- read.csv("~/GitHub/nrv-succession/code blitz succession/modeltesting-data/speciesEcoregion.csv",
header=T,stringsAsFactor=FALSE)
speciesEcoregion <- data.table(speciesEcoregion)[,ecoregionGroup:=as.numeric(as.factor(ecoregion))]
tempsp <- setkey(species[,.(species,speciesCode)],species)
speciesEcoregion <- setkey(speciesEcoregion,species)[tempsp]
sufficientLight <- read.csv("~/GitHub/nrv-succession/code blitz succession/modeltesting-data/sufficientLight.csv",
header=T,stringsAsFactor=FALSE)
seedingAlgorithm <- "wardDispersal"
cohortData <- data.table(pixelGroup = 1, ecoregionGroup = 1L,
speciesCode = 7:10, age = 41, B = 8000L,
mortality = 50, aNPPAct = 1079.75965551773)
objects <- list("pixelGroupMap"=pixelGroupMap,
"speciesEcoregion"=speciesEcoregion,
"species"=species,
"successionTimestep"=successionTimestep,
"calibrate"=calibrate,
"seedingAlgorithm"=seedingAlgorithm,
"minRelativeB"=minRelativeB,
"sufficientLight"=sufficientLight,
"lastFireYear"=lastFireYear,
"activePixelIndex"=activePixelIndex,
"lastReg"=lastReg,
"regenerationOutput"=regenerationOutput,
"cohortData"=cohortData,
"ecoregionMap"=ecoregionMap)
mySim <- simInit(times=list(start=0, end=2),
params=parameters,
modules=module,
objects=objects,
paths=path)
set.seed(1)
source(file.path(modulePath(mySim), "LBMR", "R", "seedDispersalLANDIS.R"))
output <- mySim$LBMRWardDispersalSeeding(mySim)
output <- output$regenerationOutput$numberOfReg
output
expect_equal(output,c(283,483,288,358))
rm(pixelGroupMap, output,activePixelIndex,cohortData,objects,mySim)
pixelGroupMap <- setValues(ecoregionMap,0)
pixelGroupMap[pixelindex] <- 1
pixelGroupMap[1:297] <- -1
activePixelIndex <- 298:9801
pixelGroupMap[sort(pixelindex)[1:11]] <- 3
lastFireYear <- 0
cohortData <- rbind(data.table(pixelGroup = 1, ecoregionGroup = 1L,
speciesCode = 7:10, age = 41, B = 8000L,
mortality = 50, aNPPAct = 1080),
data.table(pixelGroup = 3, ecoregionGroup = 1L,
speciesCode = 7:10, age = 1, B = 8000L,
mortality = 50, aNPPAct = 1090))
inactivePixelIndex <- 1:297
postFirePixel <- sort(pixelindex)[1:11]
objects <- list("pixelGroupMap"=pixelGroupMap,
"speciesEcoregion"=speciesEcoregion,
"species"=species,
"successionTimestep"=successionTimestep,
"calibrate"=calibrate,
"seedingAlgorithm"=seedingAlgorithm,
"minRelativeB"=minRelativeB,
"sufficientLight"=sufficientLight,
"lastFireYear"=lastFireYear,
"activePixelIndex"=activePixelIndex,
"lastReg"=lastReg,
"regenerationOutput"=regenerationOutput,
"cohortData"=cohortData,
"ecoregionMap"=ecoregionMap,
"inactivePixelIndex" = inactivePixelIndex,
"postFirePixel" = postFirePixel)
mySim <- simInit(times=list(start=0, end=2),
params=parameters,
modules=module,
objects=objects,
paths=path)
set.seed(1)
source('~/GitHub/nrv-succession/code blitz succession/modeltesting-data/seedDispersalLANDIS.R')
source(file.path(modulePath(mySim), "LBMR", "R", "seedDispersalLANDIS.R"))
output <- mySim$LBMRWardDispersalSeeding(mySim)
expect_equal(output$regenerationOutput$numberOfReg,
c(239, 439, 254, 337))
expect_equal(unique(output$pixelGroupMap[1:297]), -1)
rm(pixelGroupMap, ecoregionMap, objects, cohortData, mySim, activePixelIndex)
ecoregionMap <- raster(xmn=50,xmx=50+99*100,
ymn=50,ymx=50+99*100,
res=c(100,100), val=2)
pixelGroupMap <- ecoregionMap
pixelGroupMap[pixelindex] <- 1
ecoregionMap[pixelindex] <- 1
activePixelIndex <- pixelindex
cohortData <- data.table(pixelGroup = 1, ecoregionGroup = 1L,
speciesCode = 7:10, age = 41, B = 80L,
mortality = 50, aNPPAct = 1079.75965551773)
objects <- list("pixelGroupMap"=pixelGroupMap,
"speciesEcoregion"=speciesEcoregion,
"species"=species,
"successionTimestep"=successionTimestep,
"calibrate"=calibrate,
"seedingAlgorithm"=seedingAlgorithm,
"minRelativeB"=minRelativeB,
"sufficientLight"=sufficientLight,
"lastFireYear"=lastFireYear,
"activePixelIndex"=activePixelIndex,
"lastReg"=lastReg,
"regenerationOutput"=regenerationOutput,
"cohortData"=cohortData,
"ecoregionMap"=ecoregionMap)
mySim <- simInit(times=list(start=0, end=2),
params=parameters,
modules=module,
objects=objects,
paths=path)
output <- mySim$LBMRWardDispersalSeeding(mySim)
output <- output$regenerationOutput$numberOfReg
output
expect_equal(output,c(64,121,69,84))
ecoregionMap <- raster(xmn=50,xmx=50+99*100,
ymn=50,ymx=50+99*100,
res=c(100,100), val=2)
pixelGroupMap <- ecoregionMap
pixelGroupMap[pixelindex] <- 1
ecoregionMap[pixelindex] <- 1
activePixelIndex <- pixelindex
cohortData <- data.table(pixelGroup = 1, ecoregionGroup = 1L,
speciesCode = 7:10, age = 41, B = 80L,
mortality = 50, aNPPAct = 1079.75965551773)
objects <- list("pixelGroupMap"=pixelGroupMap,
"speciesEcoregion"=speciesEcoregion,
"species"=species,
"successionTimestep"=successionTimestep,
"calibrate"=calibrate,
"seedingAlgorithm"=seedingAlgorithm,
"minRelativeB"=minRelativeB,
"sufficientLight"=sufficientLight,
"lastFireYear"=lastFireYear,
"activePixelIndex"=activePixelIndex,
"lastReg"=lastReg,
"regenerationOutput"=regenerationOutput,
"cohortData"=cohortData,
"ecoregionMap"=ecoregionMap)
mySim <- simInit(times=list(start=0, end=2),
params=parameters,
modules=module,
objects=objects,
paths=path)
set.seed(1)
if(exists("LBMRWardDispersalSeeding")){
output <- LBMRWardDispersalSeeding(mySim)
} else {
output <- mySim$LBMRWardDispersalSeeding(mySim)
}
output <- output$regenerationOutput$numberOfReg
output
expect_equal(output,c(64,121,69,84))
module <- list("LBMR")
path <- list(modulePath="~/GitHub/nrv-succession/code blitz succession/Module_LBMR",
outputPath="~/output")
parameters <- list(.progress=list(type="graphical", interval=1),
.globals=list(verbose=FALSE),
LBMR=list( .saveInitialTime=NA))
spinupMortalityfraction <- 0.001
calibrate <- TRUE
successionTimestep <- 1
objects <- list()
species <- data.table(species = c("abiebals", "acerrubr", "acersacc", "betualle", "betupapy", "fraxamer",
"piceglau", "pinubank", "pinuresi", "pinustro", "poputrem", "querelli",
"querrubr", "thujocci", "tiliamer", "tsugcana"),
speciesCode = 1:16)
mySim <- simInit(times=list(start=0, end=1),
params=parameters,
modules=module,
objects=objects,
paths=path)
cohortData <- data.table(pixelGroup = 1:16,
ecoregionGroup = 1L,
speciesCode = 1:16,
age = c(195, 145, 295, 295, 95, 295, 295, 95, 195, 395, 95, 295, 245, 395, 245, 495),
B = 0L,
maxANPP = c(886L, 1175L, 1106L, 1202L, 1202L, 1202L, 969L, 1130L, 1017L, 1090L, 1078L, 1096L,
1017L, 1090L, 1078L, 1096L),
maxB = c(26580L, 35250L, 33180L, 36060L, 36060L, 36060L, 29070L, 33900L, 30510L, 38150L, 32340L,
32880L, 30510L, 32700L, 32340L, 32880L),
maxB_eco = 38150L,
longevity = c(200L, 150L, 300L, 300L, 100L, 300L, 300L, 100L, 200L, 400L, 100L, 300L,
250L, 400L, 250L, 500L),
mortalityshape = 10L,
growthcurve = 0.25)
calibrate
cohortData
successionTimestep
spinupMortalityfraction
species
output <- mySim$spinUp(cohortData, calibrate, successionTimestep, spinupMortalityfraction, species)
newcohortData <- output$cohortData[,.(pixelGroup,speciesCode,B)]
newcohortData
newcohortData_compared <- data.table(pixelGroup = 1:16,
speciesCode = 1:16,
B = c(372L, 545L, 422L, 458L, 687L, 458L, 369L, 645L,
427L, 384L, 616L, 418L, 403L, 396L, 427L, 387L),
key = "pixelGroup")
expect_equal(newcohortData,newcohortData_compared)
str(newcohortData)
key(newcohortData)
newcohortData_compared <- data.table(pixelGroup = 1:16,
speciesCode = 1:16,
B = c(372L, 545L, 422L, 458L, 687L, 458L, 369L, 645L,
427L, 384L, 616L, 418L, 403L, 396L, 427L, 387L))
expect_equal(newcohortData,newcohortData_compared)
rm(output,cohortData,mySim, newcohortData, newcohortData_compared)
cohortData <- data.table(pixelGroup = 1:16,
ecoregionGroup = 1L,
speciesCode = 1:16,
age = c(196, 148, 296, 296,  96, 296, 296,  96, 196, 396,  96, 296, 248, 396, 248, 496),
B = 0L,
maxANPP = c(886L, 1175L, 1106L, 1202L, 1202L, 1202L, 969L, 1130L, 1017L, 1090L, 1078L, 1096L,
1017L, 1090L, 1078L, 1096L),
maxB = c(26580L, 35250L, 33180L, 36060L, 36060L, 36060L, 29070L, 33900L, 30510L, 38150L, 32340L,
32880L, 30510L, 32700L, 32340L, 32880L),
maxB_eco = 38150L,
longevity = c(200L, 150L, 300L, 300L, 100L, 300L, 300L, 100L, 200L, 400L, 100L, 300L,
250L, 400L, 250L, 500L),
mortalityshape = 10L,
growthcurve = 0.25)
successionTimestep <- 4
objects <- list()
mySim <- simInit(times=list(start=0, end=1),
params=parameters,
modules=module,
objects=objects,
paths=path)
output <- mySim$spinUp(cohortData, calibrate, successionTimestep, spinupMortalityfraction, species)
newcohortData <- output$cohortData[,.(pixelGroup,speciesCode,B)]
newcohortData
newcohortData_compared <- data.table(pixelGroup = 1:16,
speciesCode = 1:16,
B = c(350L, 424L, 405L, 440L, 602L, 440L, 355L, 566L, 402L, 373L,
540L, 401L, 348L, 384L, 368L, 378L))
expect_equal(newcohortData,newcohortData_compared)
rm(cohortData, calibrate, successionTimestep)
calibrate <- TRUE
successionTimestep <- 1
cohortData <- data.table(pixelGroup = 1:16,
ecoregionGroup = 1L,
speciesCode = 1:16,
age = 1,
B = 0L,
maxANPP = c(886L, 1175L, 1106L, 1202L, 1202L, 1202L, 969L, 1130L, 1017L, 1090L, 1078L, 1096L,
1017L, 1090L, 1078L, 1096L),
maxB = c(26580L, 35250L, 33180L, 36060L, 36060L, 36060L, 29070L, 33900L, 30510L, 38150L, 32340L,
32880L, 30510L, 32700L, 32340L, 32880L),
maxB_eco = c(38150L, 38150L, 38150L, 38150L, 38150L, 38150L, 38150L, 38150L, 38150L,
38150L, 38150L, 38150L, 38150L, 38150L, 38150L, 38150L),
longevity = c(200L, 150L, 300L, 300L, 100L, 300L, 300L, 100L, 200L, 400L, 100L, 300L,
250L, 400L, 250L, 500L),
mortalityshape = 10L,
growthcurve = 0.25)
output <- mySim$spinUp(cohortData, calibrate, successionTimestep, spinupMortalityfraction, species)
newcohortData <- output$cohortData[,.(pixelGroup,speciesCode,B)]
newcohortData
newcohortData_compared <- data.table(pixelGroup = 1:16,
speciesCode = 1:16,
B = c(886L, 1175L, 1106L, 1202L, 1202L, 1202L, 969L, 1130L, 1017L,
1090L, 1078L, 1096L, 1017L, 1090L, 1078L, 1096L))
expect_identical(newcohortData,newcohortData_compared)
rm(cohortData, calibrate, successionTimestep)
calibrate <- TRUE
successionTimestep <- 1
cohortData <- data.table(pixelGroup = 1:16,
ecoregionGroup = 1L,
speciesCode = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
age = c(rep(1,15),495),
B = 0L,
maxANPP = c(886L, 1175L, 1106L, 1202L, 1202L, 1202L, 969L, 1130L, 1017L, 1090L, 1078L, 1096L,
1017L, 1090L, 1078L, 1096L),
maxB = c(26580L, 35250L, 33180L, 36060L, 36060L, 36060L, 29070L, 33900L, 30510L, 38150L, 32340L,
32880L, 30510L, 32700L, 32340L, 32880L),
maxB_eco = c(38150L, 38150L, 38150L, 38150L, 38150L, 38150L, 38150L, 38150L, 38150L,
38150L, 38150L, 38150L, 38150L, 38150L, 38150L, 38150L),
longevity = c(200L, 150L, 300L, 300L, 100L, 300L, 300L, 100L, 200L, 400L, 100L, 300L,
250L, 400L, 250L, 500L),
mortalityshape = 10L,
growthcurve = 0.25)
output <- mySim$spinUp(cohortData, calibrate, successionTimestep, spinupMortalityfraction, species)
newcohortData <- output$cohortData[,.(pixelGroup,speciesCode,B)]
newcohortData_compared <- data.table(pixelGroup = 1:16,
speciesCode = 1:16,
B = c(886L, 1175L, 1106L, 1202L, 1202L, 1202L, 969L, 1130L, 1017L,
1090L, 1078L, 1096L, 1017L, 1090L, 1078L, 387L))
expect_equal(newcohortData,newcohortData_compared)
