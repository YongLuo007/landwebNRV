names(MB_TSP_FMU12)[12] <- "FULL_HALF"
MB_TSP_FMUs13_14 <- read.csv(file.path(workingpath, "MB_TSP_FMUs13_14.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
setnames(MB_TSP_FMUs13_14, "COND1", "COND")
set(MB_TSP_FMUs13_14, ,c("COND2","COND3"), NULL)
MB_TSP_Highrock <- read.csv(file.path(workingpath, "MB_TSP_Highrock.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
names(MB_TSP_Highrock)[12] <- "FULL_HALF"
MB_TSP_Pineland <- read.csv(file.path(workingpath, "MB_TSP_Pineland.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
names(MB_TSP_Pineland)[6] <- "TRANS"
MB_TSP_Saskriver_1 <- read.csv(file.path(workingpath, "MB_TSP_Saskriver_1.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MB_TSP_Saskriver_2 <- read.csv(file.path(workingpath, "MB_TSP_Saskriver_2.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
AllTSP <- rbind(MB_TSP_FML1,        MB_TSP_FMU11,       MB_TSP_FMU12,
MB_TSP_FMUs13_14,   MB_TSP_Highrock,    MB_TSP_Pineland,
MB_TSP_Saskriver_1, MB_TSP_Saskriver_2)
AllTSP
ls()
save.image(file.path(workingpath,"MBTSP.RData"))
rm(list=ls())
workingpath <- "C:/Users/yonluo/Documents/PSPs/MB/PSPcsv"
MBPSP_2012_file1 <- read.csv(file.path(workingpath, "MBPSP_2012_file1.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file2 <- read.csv(file.path(workingpath, "MBPSP_2012_file2.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file3 <- read.csv(file.path(workingpath, "MBPSP_2012_file3.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file4 <- read.csv(file.path(workingpath, "MBPSP_2012_file4.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file5 <- read.csv(file.path(workingpath, "MBPSP_2012_file5.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
names(MBPSP_2012_file1)
names(MBPSP_2012_file2)
names(MBPSP_2012_file3)
names(MBPSP_2012_file4)
names(MBPSP_2012_file5)
names(MBPSP_2012_file1)==names(MBPSP_2012_file2)
names(MBPSP_2012_file1)==names(MBPSP_2012_file3)
names(MBPSP_2012_file1)==names(MBPSP_2012_file4)
names(MBPSP_2012_file1)==names(MBPSP_2012_file5)
names(MBPSP_2012_file1)==names(MBPSP_2012_file6)
AllPSP <- rbind(MBPSP_2012_file1, MBPSP_2012_file2, MBPSP_2012_file3,
MBPSP_2012_file4, MBPSP_2012_file5)
dim(AllPSP)
names(AllPSP)
names(AllPSP)[18:24]
names(AllPSP)[18:24]
names(AllPSP)[18:24]
names(AllPSP)[25:31]
names(AllPSP)[32:37]
names(AllPSP)[32:38]
names(AllPSP)[39:45]
25-18
names(AllPSP)
is <- seq(18, 53, by = 7)
is
AllPSP[,1:18]
AllPSP[,1:18,with=TRUE]
AllPSP[,1:18,with = FALSE]
AllPSP[,c(1:17,18:24),with = FALSE]
AllPSP[,c(1:17,25:32),with = FALSE]
i <- is[2]
AllPSPtp[,c(1:17,(i):(i+7)), with = FALSE]
AllPSP[,c(1:17,(i):(i+7)), with = FALSE]
i
AllPSP[,1:24, with = FALSE][0,]
names(AllPSP[,1:24, with = FALSE][0,])
AllPSPtp <- rbind(MBPSP_2012_file1, MBPSP_2012_file2, MBPSP_2012_file3,
MBPSP_2012_file4, MBPSP_2012_file5)
allPSP <- AllPSPtp[,1:24, with = FALSE][0,]
setnames(allPSP, c("DBH1", "HGT1", "STATUS1", "CLASS1",
"AGE1", "YEARMEA1", "PLOTSIZE1"),
c("DBH", "HGT", "STATUS", "CLASS",
"AGE", "YEARMEA", "PLOTSIZE"))
allPSP
allPSPadd <- AllPSPtp[,c(1:17,(i):(i+7)), with = FALSE]
names(allPSPadd)
rm(list=ls())
workingpath <- "C:/Users/yonluo/Documents/PSPs/MB/PSPcsv"
MBPSP_2012_file1 <- read.csv(file.path(workingpath, "MBPSP_2012_file1.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file2 <- read.csv(file.path(workingpath, "MBPSP_2012_file2.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file3 <- read.csv(file.path(workingpath, "MBPSP_2012_file3.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file4 <- read.csv(file.path(workingpath, "MBPSP_2012_file4.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file5 <- read.csv(file.path(workingpath, "MBPSP_2012_file5.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
AllPSPtp <- rbind(MBPSP_2012_file1, MBPSP_2012_file2, MBPSP_2012_file3,
MBPSP_2012_file4, MBPSP_2012_file5)
allPSP <- AllPSPtp[,1:24, with = FALSE][0,]
setnames(allPSP, c("DBH1", "HGT1", "STATUS1", "CLASS1",
"AGE1", "YEARMEA1", "PLOTSIZE1"),
c("DBH", "HGT", "STATUS", "CLASS",
"AGE", "YEARMEA", "PLOTSIZE"))
is <- seq(18, 53, by = 7)
for (i in is){
allPSPadd <- AllPSPtp[,c(1:17,(i):(i+7)), with = FALSE]
names(allPSPadd)[18:25] <- c("DBH", "HGT", "STATUS", "CLASS",
"AGE", "YEARMEA", "PLOTSIZE")
allPSP <- rbind(allPSP, allPSPadd)
}
rm(i, is, allPSPadd)
allPSP
18+7
i <- is[2]
iss <- seq(18, 53, by = 7)
i <- iss[2]
i
allPSPadd <- AllPSPtp[,c(1:17,(i):(i+7)), with = FALSE]
allPSPadd
allPSPadd <- AllPSPtp[,c(1:17,(i):(i+6)), with = FALSE]
allPSPadd
iss <- seq(18, 53, by = 7)
for (i in iss){
allPSPadd <- AllPSPtp[,c(1:17,(i):(i+6)), with = FALSE]
names(allPSPadd)[18:24] <- c("DBH", "HGT", "STATUS", "CLASS",
"AGE", "YEARMEA", "PLOTSIZE")
allPSP <- rbind(allPSP, allPSPadd)
}
rm(i, iss, allPSPadd)
allPSP
AllPSPtp
802782/133797
allPSP
allPSP
allPSP[!is.na(DBH) & !is.na(HGT) & !is.na(STATUS) &
!is.na(CLASS) & !is.na(AGE) & !is.na(YEARMEA),]
allPSP
length(is.na(allPSP$YEARMEA))
length(which(is.na(allPSP$YEARMEA)))
allPSP[!is.na(DBH) & !is.na(HGT),]
allPSP[!is.na(DBH),]
rm(list=ls())
workingpath <- "C:/Users/yonluo/Documents/PSPs/MB/PSPcsv"
MBPSP_2012_file1 <- read.csv(file.path(workingpath, "MBPSP_2012_file1.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file2 <- read.csv(file.path(workingpath, "MBPSP_2012_file2.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file3 <- read.csv(file.path(workingpath, "MBPSP_2012_file3.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file4 <- read.csv(file.path(workingpath, "MBPSP_2012_file4.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
MBPSP_2012_file5 <- read.csv(file.path(workingpath, "MBPSP_2012_file5.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
AllPSPtp <- rbind(MBPSP_2012_file1, MBPSP_2012_file2, MBPSP_2012_file3,
MBPSP_2012_file4, MBPSP_2012_file5)
allPSP <- AllPSPtp[,1:24, with = FALSE][0,]
setnames(allPSP, c("DBH1", "HGT1", "STATUS1", "CLASS1",
"AGE1", "YEARMEA1", "PLOTSIZE1"),
c("DBH", "HGT", "STATUS", "CLASS",
"AGE", "YEARMEA", "PLOTSIZE"))
iss <- seq(18, 53, by = 7)
for (i in iss){
allPSPadd <- AllPSPtp[,c(1:17,(i):(i+6)), with = FALSE]
names(allPSPadd)[18:24] <- c("DBH", "HGT", "STATUS", "CLASS",
"AGE", "YEARMEA", "PLOTSIZE")
allPSP <- rbind(allPSP, allPSPadd)
}
rm(i, iss, allPSPadd)
allPSP <- allPSP[!is.na(DBH),] # has DBH information
ls()
rm(AllPSPtp)
save.image(file.path(workingpath,"MBPSP.RData"))
rm(list = ls())
workingPath <- "C:/Users/yonluo/Documents/PSPs/NT/GNWT_forinv_export_entireDB_apr152015"
majorTreeData <- read.csv(file.path(workingPath, "TREE.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
majorPlotInfor <- read.csv(file.path(workingPath, "PLOT.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
wesbogyTreeData <- read.csv(file.path(workingPath, "WESBOGY_TREE.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
wesbogyPlotInfor <- read.csv(file.path(workingPath, "WESBOGY_PLOT.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
names(majorTreeData)
names(majorPlotInfor)
sampleTreeData <- read.csv(file.path(workingPath, "SAMPLE_TREE.csv"),
header = TRUE,
stringsAsFactor = FALSE) %>%
data.table
names(sampleTreeData)
setwd("~/PSPs/Data/NT/data")
setwd("~/PSPs/NT/data")
# package requirements
library(data.table)
library(dplyr)
library(rgdal)
# these codes are for organize the sampling data for NWT
setwd("~/PSPs/NT/data")
plotdata <- read.csv("PLOT.csv",header=TRUE,stringsAsFactor=FALSE)
plotdata <- data.table(plotdata)
# check whether the one plcot has multiple records in plotdata
length(unique(plotdata$PLOT_CODE))==nrow(plotdata) # TRUE means each plot has a unique record
# gathering location information in plotdata
# the location information in this dataset can be found in three ways: 1 by Lat_DEC, Long_DEC
# 2. by LAT_DEG and so on
# 3. by UTM
setnames(plotdata,c("Lat_DEC","Long_dec"),c("Latitude","Longitude"))
plotdata[!is.na(LAT_DEG) & is.na(LAT_MIN),LAT_MIN:=0]
plotdata[!is.na(LAT_DEG) & is.na(LAT_SEC),LAT_SEC:=0]
plotdata[!is.na(LAT_DEG) & is.na(LONG_MIN),LONG_MIN:=0]
plotdata[!is.na(LAT_DEG) & is.na(LONG_SEC),LONG_SEC:=0]
plotdata[(is.na(Latitude) | Latitude==0) & (!is.na(LAT_DEG) & !is.na(LONG_DEG)),
':='(Latitude=LAT_DEG+LAT_MIN/60+LAT_SEC/3600,
Longitude=LONG_DEG+LONG_MIN/60+LONG_SEC/3600)][,':='(LONG_DEG=NULL,LONG_MIN=NULL,LONG_SEC=NULL,
LAT_DEG=NULL,LAT_MIN=NULL,LAT_SEC=NULL)]
# additional location file gives the additional locations that may not be provided by plotdata
additionalLocations <- read.csv("AdditionalLocations.csv",header=TRUE,stringsAsFactor=FALSE)
additionalLocations <- data.table(additionalLocations)[LATITUDE!=0,.(PROJ_CODE,
SAMPLE,PLOT,LATITUDE,LONGITUDE)]
additionalLocations$SAMPLE <- as.factor(additionalLocations$SAMPLE)
setnames(additionalLocations,"PROJ_CODE","PROJECT_CODE")
plotdata <- dplyr::left_join(plotdata,additionalLocations,by=c("PROJECT_CODE","SAMPLE","PLOT")) %>%
data.table
plotdata[(is.na(Latitude) | Latitude==0),':='(Latitude=LATITUDE,Longitude=LONGITUDE)]
plotdata_LatLocations <- plotdata[!is.na(Latitude) | Latitude!=0][,Longitude:=-abs(Longitude)]
plotdata_UTMLocations <- plotdata[which(!(plotdata$PLOT_CODE %in% plotdata_LatLocations$PLOT_CODE))]
plotdata_UTMLocations <- plotdata_UTMLocations[!is.na(ZONE) & !is.na(EASTING) & !is.na(NORTHING)]
# convert UTM locations to latitude
utm_longlat_data <- plotdata_UTMLocations[1,':='(Longitude=0,Latitude=0)][0,]
for (i in unique(plotdata_UTMLocations$ZONE)){
zonedata <- plotdata_UTMLocations[ZONE==i]
zoneutmcoor<-SpatialPoints(cbind(zonedata$EASTING,zonedata$NORTHING),
proj4string=CRS(paste("+proj=utm +zone=",i,sep="")))
zonelonglatcoor<-spTransform(zoneutmcoor,CRS("+proj=longlat"))
zonelonglatcoor <- setnames(data.table(attributes(zonelonglatcoor)$coords),
c("Long","Lat"))
zonedata[,':='(Longitude=zonelonglatcoor$Long,Latitude=zonelonglatcoor$Lat)]
utm_longlat_data <- rbindlist(list(utm_longlat_data,zonedata))
}
plotdata_withLocations <- data.table(rbind(plotdata_LatLocations,utm_longlat_data))[
,.(PROJECT_CODE,SAMPLE,PLOT,PLOT_CODE,Latitude,Longitude)]
# remove the plots that do not have measurement year
plotdata_withMeasureYear <- plotdata[Year!=1900][,.(PROJECT_CODE,SAMPLE,PLOT,
PLOT_CODE,Year,PLOT_TYPE,SIZE,fc_id)]
unique(plotdata_withMeasureYear$PLOT_TYPE)
#[1] "F" "P" "L" "T" "C"
# F is fixed radius plot
# P is prism or variable radius plot
# L is psp fixed radius
# T is TSP
# C is cummulative voloum # what is this????
nrow(plotdata_withMeasureYear[PLOT_TYPE=="C" | PLOT_TYPE=="t"]) # 25 PLOTS
nrow(plotdata_withMeasureYear[PLOT_TYPE=="F" | PLOT_TYPE=="L"]) # 6134 plots
nrow(plotdata_withMeasureYear[PLOT_TYPE=="P"]) # 16961 plots
treedata <- read.csv("TREE.csv",header=TRUE,stringsAsFactor=FALSE)
treedata <- data.table(treedata)
length(unique(treedata$PLOT_CODE))
# the link between treedata and plot data is PLOT_CODE
setkey(treedata,PLOT_CODE)
setkey(plotdata_withMeasureYear,PLOT_CODE)
treedata <- treedata[plotdata_withMeasureYear,nomatch=0]
# measurement year range
range(treedata$Year) # 1977 to 2015
length(unique(treedata$PLOT_CODE))
treedatasummary <- treedata[,.(NofTree=length(DBH),Year=mean(Year),
Plot_Type=PLOT_TYPE[1],Size=mean(SIZE,na.rm=TRUE),FC_ID=mean(fc_id)),
by=PLOT_CODE]
treedatasummary <- dplyr::left_join(treedatasummary,plotdata_withLocations,by="PLOT_CODE") %>%
data.table
# add stand age information from the geodatabase NT_FORCOV_ATT.gdb
# SAinfor.csv was attribute table output from the geodatabase
# the linkage between treedatasummary and SAinfor is FC_ID
# the origin column contains the year when the stands originate
SAinfor <- read.csv("SA_infor.csv",header=TRUE,stringsAsFactor=FALSE)
SAinfor <- data.table(SAinfor)[!is.na(ORIGIN) & ORIGIN!=0 & FC_ID!=0][,.(FC_ID,ORIGIN)]
setnames(SAinfor,"ORIGIN","OriginYear")
treedatasummary <- dplyr::left_join(treedatasummary,SAinfor,by="FC_ID") %>%
data.table
treedatasummary[!is.na(OriginYear),SA:=Year-OriginYear]
#
ls()
rm(list=ls())
# package requirements
library(data.table)
library(dplyr)
library(rgdal)
# these codes are for organize the sampling data for NWT
setwd("~/PSPs/NT/data")
plotdata <- read.csv("PLOT.csv",header=TRUE,stringsAsFactor=FALSE)
plotdata <- data.table(plotdata)
# check whether the one plcot has multiple records in plotdata
length(unique(plotdata$PLOT_CODE))==nrow(plotdata) # TRUE means each plot has a unique record
# gathering location information in plotdata
# the location information in this dataset can be found in three ways: 1 by Lat_DEC, Long_DEC
# 2. by LAT_DEG and so on
# 3. by UTM
setnames(plotdata,c("Lat_DEC","Long_dec"),c("Latitude","Longitude"))
plotdata[!is.na(LAT_DEG) & is.na(LAT_MIN),LAT_MIN:=0]
plotdata[!is.na(LAT_DEG) & is.na(LAT_SEC),LAT_SEC:=0]
plotdata[!is.na(LAT_DEG) & is.na(LONG_MIN),LONG_MIN:=0]
plotdata[!is.na(LAT_DEG) & is.na(LONG_SEC),LONG_SEC:=0]
plotdata[(is.na(Latitude) | Latitude==0) & (!is.na(LAT_DEG) & !is.na(LONG_DEG)),
':='(Latitude=LAT_DEG+LAT_MIN/60+LAT_SEC/3600,
Longitude=LONG_DEG+LONG_MIN/60+LONG_SEC/3600)][,':='(LONG_DEG=NULL,LONG_MIN=NULL,LONG_SEC=NULL,
LAT_DEG=NULL,LAT_MIN=NULL,LAT_SEC=NULL)]
# additional location file gives the additional locations that may not be provided by plotdata
additionalLocations <- read.csv("AdditionalLocations.csv",header=TRUE,stringsAsFactor=FALSE)
additionalLocations <- data.table(additionalLocations)[LATITUDE!=0,.(PROJ_CODE,
SAMPLE,PLOT,LATITUDE,LONGITUDE)]
additionalLocations$SAMPLE <- as.factor(additionalLocations$SAMPLE)
setnames(additionalLocations,"PROJ_CODE","PROJECT_CODE")
plotdata <- dplyr::left_join(plotdata,additionalLocations,by=c("PROJECT_CODE","SAMPLE","PLOT")) %>%
data.table
plotdata[(is.na(Latitude) | Latitude==0),':='(Latitude=LATITUDE,Longitude=LONGITUDE)]
plotdata_LatLocations <- plotdata[!is.na(Latitude) | Latitude!=0][,Longitude:=-abs(Longitude)]
plotdata_UTMLocations <- plotdata[which(!(plotdata$PLOT_CODE %in% plotdata_LatLocations$PLOT_CODE))]
plotdata_UTMLocations <- plotdata_UTMLocations[!is.na(ZONE) & !is.na(EASTING) & !is.na(NORTHING)]
# convert UTM locations to latitude
utm_longlat_data <- plotdata_UTMLocations[1,':='(Longitude=0,Latitude=0)][0,]
for (i in unique(plotdata_UTMLocations$ZONE)){
zonedata <- plotdata_UTMLocations[ZONE==i]
zoneutmcoor<-SpatialPoints(cbind(zonedata$EASTING,zonedata$NORTHING),
proj4string=CRS(paste("+proj=utm +zone=",i,sep="")))
zonelonglatcoor<-spTransform(zoneutmcoor,CRS("+proj=longlat"))
zonelonglatcoor <- setnames(data.table(attributes(zonelonglatcoor)$coords),
c("Long","Lat"))
zonedata[,':='(Longitude=zonelonglatcoor$Long,Latitude=zonelonglatcoor$Lat)]
utm_longlat_data <- rbindlist(list(utm_longlat_data,zonedata))
}
plotdata_withLocations <- data.table(rbind(plotdata_LatLocations,utm_longlat_data))[
,.(PROJECT_CODE,SAMPLE,PLOT,PLOT_CODE,Latitude,Longitude)]
# remove the plots that do not have measurement year
plotdata_withMeasureYear <- plotdata[Year!=1900][,.(PROJECT_CODE,SAMPLE,PLOT,
PLOT_CODE,Year,PLOT_TYPE,SIZE,fc_id)]
unique(plotdata_withMeasureYear$PLOT_TYPE)
#[1] "F" "P" "L" "T" "C"
# F is fixed radius plot
# P is prism or variable radius plot
# L is psp fixed radius
# T is TSP
# C is cummulative voloum # what is this????
nrow(plotdata_withMeasureYear[PLOT_TYPE=="C" | PLOT_TYPE=="t"]) # 25 PLOTS
nrow(plotdata_withMeasureYear[PLOT_TYPE=="F" | PLOT_TYPE=="L"]) # 6134 plots
nrow(plotdata_withMeasureYear[PLOT_TYPE=="P"]) # 16961 plots
treedata <- read.csv("TREE.csv",header=TRUE,stringsAsFactor=FALSE)
treedata <- data.table(treedata)
length(unique(treedata$PLOT_CODE))
# the link between treedata and plot data is PLOT_CODE
setkey(treedata,PLOT_CODE)
setkey(plotdata_withMeasureYear,PLOT_CODE)
treedata <- treedata[plotdata_withMeasureYear,nomatch=0]
# measurement year range
range(treedata$Year) # 1977 to 2015
length(unique(treedata$PLOT_CODE))
treedatasummary <- treedata[,.(NofTree=length(DBH),Year=mean(Year),
Plot_Type=PLOT_TYPE[1],Size=mean(SIZE,na.rm=TRUE),FC_ID=mean(fc_id)),
by=PLOT_CODE]
treedatasummary <- dplyr::left_join(treedatasummary,plotdata_withLocations,by="PLOT_CODE") %>%
data.table
# add stand age information from the geodatabase NT_FORCOV_ATT.gdb
# SAinfor.csv was attribute table output from the geodatabase
# the linkage between treedatasummary and SAinfor is FC_ID
# the origin column contains the year when the stands originate
SAinfor <- read.csv("SA_infor.csv",header=TRUE,stringsAsFactor=FALSE)
SAinfor <- data.table(SAinfor)[!is.na(ORIGIN) & ORIGIN!=0 & FC_ID!=0][,.(FC_ID,ORIGIN)]
setnames(SAinfor,"ORIGIN","OriginYear")
treedatasummary <- dplyr::left_join(treedatasummary,SAinfor,by="FC_ID") %>%
data.table
treedatasummary[!is.na(OriginYear),SA:=Year-OriginYear]
#
ls()
additionalLocations
plotdata
treedatasummary
plotdata_withLocations
treedatasummary
length(which(is.na(treedatasummary$SA)))
22815-15283
ls()
save.image("NWTTSP.RData")
rm(list=ls())
setwd("~/PSPs/NT/data/wesbogy dataset")
rm(list=ls())
setwd("~/PSPs/NT/data/wesbogy dataset")
wesbogyPlot <- read.csv("WESBOGY_PLOT.csv", header=T, stringsAsFactor = F) %>%
data.table
wesbogyTree <- read.csv("WESBOGY_TREE.csv", header=T, stringsAsFactor = F) %>%
data.table
ls()
save.image("NWT_WESBOGY.RData")
rm(list=ls())
setwd("~/PSPs/NT/SK/SKPSP")
setwd("~/PSPs/SK/SKPSP")
rm(list=ls())
setwd("~/PSPs/SK/SKPSP")
treedata <- read.csv("SKPSPtrees.csv",header=T, stringsAsFactor = F)
plotheader1 <- read.csv("age_samples.csv",header=T, stringsAsFactor = F)
plotheader2 <- read.csv("measurement_header.csv",header=T, stringsAsFactor = F)
plotheader3 <- read.csv("plot_header.csv",header=T, stringsAsFactor = F)
rm(list=ls())
setwd("~/PSPs/SK/SKPSP")
treedata <- read.csv("SKPSPtrees.csv",header=T, stringsAsFactor = F) %>%
data.table
plotheader1 <- read.csv("age_samples.csv",header=T, stringsAsFactor = F) %>%
data.table
plotheader2 <- read.csv("measurement_header.csv",header=T,
stringsAsFactor = F) %>%
data.table
plotheader3 <- read.csv("plot_header.csv",header=T, stringsAsFactor = F) %>%
data.table
ls()
names(plotheader1)
names(plotheader2)
names(plotheader3)
names(treedata)
save.image("SKPSP.RData")
rm(list=ls())
setwd("~/PSPs/SK/SKTSP")
PAtreedata <- read.csv("PA_Tree_Measurement.csv",header=T, stringsAsFactor = F) %>%
data.table
PAplotheader <- read.csv("PA_Plot_Locations_csrs98.csv",header=T, stringsAsFactor = F) %>%
data.table
PAsampletree <- read.csv("PA_Sample_Trees.csv",header=T, stringsAsFactor = F) %>%
data.table
PPtreedata <- read.csv("PP_Tree_Measurement.csv",header=T, stringsAsFactor = F) %>%
data.table
PPplotheader <- read.csv("PP_Plot_Locations_csrs98.csv",header=T, stringsAsFactor = F) %>%
data.table
PPsampletree <- read.csv("PP_Sample_Trees.csv",header=T, stringsAsFactor = F) %>%
data.table
PAtreedata
ls()
save.image("SKTSP_PAPP.RData")
rm(list=ls())
setwd("~/PSPs/SK/SKTSP/Mistic")
treedata <- read.csv("output.csv",header=T, stringsAsFactor = F) %>%
data.table
names(treedata)
head(treedata)
plotheader <- read.csv("SFVIPLOT.csv",header=T, stringsAsFactor = F) %>%
data.table
names(plotheader)
"AGE" %in% names(plotheader)
nrow(treedata)
rm(list=ls())
setwd("~/PSPs/SK/SKTSP/Mistic")
treedata <- read.csv("COMPILEDTREEDATA.csv",header=T, stringsAsFactor = F) %>%
data.table
plotheader <- read.csv("COMPILEDPLOTDATA.csv",header=T, stringsAsFactor = F) %>%
data.table
ls()
save.image("SK_TSP_Mistic.RData")
rm(list=ls())
setwd("~/PSPs/NRCAN/NFI_PSP")
rm(list=ls())
setwd("~/PSPs/NRCAN/NFI_PSP")
largeTreedata <- read.csv("all_gp_ltp_tree.csv",header=T, stringsAsFactor = F) %>%
data.table
largeTreeAgedata <- read.csv("all_gp_ltp_tree_age.csv",header=T, stringsAsFactor = F) %>%
data.table
largeTreePlotHeader <- read.csv("all_gp_ltp_header.csv",header=T, stringsAsFactor = F) %>%
data.table
plotOrigin <- read.csv("all_gp_origin.csv",header=T, stringsAsFactor = F) %>%
data.table
smallTreedata <- read.csv("all_gp_stp_tree.csv",header=T, stringsAsFactor = F) %>%
data.table
smallTreePlotHeader <- read.csv("all_gp_stp_header.csv",header=T, stringsAsFactor = F) %>%
data.table
ls()
save.image("NFI.RData")
